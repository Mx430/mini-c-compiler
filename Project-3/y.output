Terminals unused in grammar

   LEFT_ASSIGN
   RIGHT_ASSIGN
   AND_ASSIGN
   XOR_ASSIGN
   OR_ASSIGN
   CONST
   VOID


State 13 conflicts: 1 reduce/reduce


Grammar

    0 $accept: starter $end

    1 starter: starter builder
    2        | builder

    3 builder: function
    4        | declaration

    5 $@1: %empty

    6 $@2: %empty

    7 $@3: %empty

    8 function: type $@1 identifier $@2 '(' argument_list ')' $@3 compound_stmt

    9 type: data_type pointer
   10     | data_type

   11 pointer: '*' pointer
   12        | '*'

   13 data_type: sign_specifier type_specifier
   14          | type_specifier

   15 sign_specifier: SIGNED
   16               | UNSIGNED

   17 type_specifier: INT
   18               | SHORT INT
   19               | SHORT
   20               | LONG
   21               | LONG INT
   22               | LONG_LONG
   23               | LONG_LONG INT

   24 argument_list: arguments
   25              | %empty

   26 arguments: arguments ',' arg
   27          | arg

   28 arg: type identifier

   29 stmt: compound_stmt
   30     | single_stmt

   31 $@4: %empty

   32 compound_stmt: '{' $@4 statements '}'

   33 statements: statements stmt
   34           | %empty

   35 single_stmt: if_block
   36            | for_block
   37            | while_block
   38            | declaration
   39            | function_call ';'
   40            | RETURN ';'
   41            | CONTINUE ';'
   42            | BREAK ';'
   43            | RETURN sub_expr ';'

   44 $@5: %empty

   45 for_block: FOR '(' expression_stmt expression_stmt ')' $@5 stmt
   46          | FOR '(' expression_stmt expression_stmt expression ')' stmt

   47 if_block: IF '(' expression ')' stmt
   48         | IF '(' expression ')' stmt ELSE stmt

   49 $@6: %empty

   50 while_block: WHILE '(' expression ')' $@6 stmt

   51 $@7: %empty

   52 declaration: type $@7 declaration_list ';'
   53            | declaration_list ';'
   54            | unary_expr ';'

   55 declaration_list: declaration_list ',' sub_decl
   56                 | sub_decl

   57 sub_decl: assignment_expr
   58         | identifier
   59         | array_index

   60 expression_stmt: expression ';'
   61                | ';'

   62 expression: expression ',' sub_expr
   63           | sub_expr

   64 sub_expr: sub_expr '>' sub_expr
   65         | sub_expr '<' sub_expr
   66         | sub_expr EQ sub_expr
   67         | sub_expr NOT_EQ sub_expr
   68         | sub_expr LS_EQ sub_expr
   69         | sub_expr GR_EQ sub_expr
   70         | sub_expr LOGICAL_AND sub_expr
   71         | sub_expr LOGICAL_OR sub_expr
   72         | '!' sub_expr
   73         | arithmetic_expr
   74         | assignment_expr
   75         | unary_expr

   76 assignment_expr: identifier assign_op arithmetic_expr
   77                | identifier assign_op array_index
   78                | identifier assign_op function_call
   79                | identifier assign_op unary_expr
   80                | unary_expr assign_op unary_expr

   81 unary_expr: identifier INCREMENT
   82           | identifier DECREMENT
   83           | DECREMENT identifier
   84           | INCREMENT identifier

   85 identifier: IDENTIFIER

   86 assign_op: '='
   87          | ADD_ASSIGN
   88          | SUB_ASSIGN
   89          | MUL_ASSIGN
   90          | DIV_ASSIGN
   91          | MOD_ASSIGN

   92 arithmetic_expr: arithmetic_expr '+' arithmetic_expr
   93                | arithmetic_expr '-' arithmetic_expr
   94                | arithmetic_expr '*' arithmetic_expr
   95                | arithmetic_expr '/' arithmetic_expr
   96                | arithmetic_expr '%' arithmetic_expr
   97                | '(' arithmetic_expr ')'
   98                | '-' arithmetic_expr
   99                | identifier
  100                | constant

  101 constant: DEC_CONSTANT
  102         | HEX_CONSTANT

  103 array_index: identifier '[' sub_expr ']'

  104 function_call: identifier '(' parameter_list ')'
  105              | identifier '(' ')'

  106 parameter_list: parameter_list ',' parameter
  107               | parameter

  108 parameter: sub_expr
  109          | STRING


Terminals, with rules where they appear

$end (0) 0
'!' (33) 72
'%' (37) 96
'(' (40) 8 45 46 47 48 50 97 104 105
')' (41) 8 45 46 47 48 50 97 104 105
'*' (42) 11 12 94
'+' (43) 92
',' (44) 26 55 62 106
'-' (45) 93 98
'/' (47) 95
';' (59) 39 40 41 42 43 52 53 54 60 61
'<' (60) 65
'=' (61) 86
'>' (62) 64
'[' (91) 103
']' (93) 103
'{' (123) 32
'}' (125) 32
error (256)
IDENTIFIER (258) 85
DEC_CONSTANT (259) 101
HEX_CONSTANT (260) 102
STRING (261) 109
LOGICAL_AND (262) 70
LOGICAL_OR (263) 71
LS_EQ (264) 68
GR_EQ (265) 69
EQ (266) 66
NOT_EQ (267) 67
MUL_ASSIGN (268) 89
DIV_ASSIGN (269) 90
MOD_ASSIGN (270) 91
ADD_ASSIGN (271) 87
SUB_ASSIGN (272) 88
LEFT_ASSIGN (273)
RIGHT_ASSIGN (274)
AND_ASSIGN (275)
XOR_ASSIGN (276)
OR_ASSIGN (277)
INCREMENT (278) 81 84
DECREMENT (279) 82 83
SHORT (280) 18 19
INT (281) 17 18 21 23
LONG (282) 20 21
LONG_LONG (283) 22 23
SIGNED (284) 15
UNSIGNED (285) 16
CONST (286)
VOID (287)
IF (288) 47 48
FOR (289) 45 46
WHILE (290) 50
CONTINUE (291) 41
BREAK (292) 42
RETURN (293) 40 43
UMINUS (294)
LOWER_THAN_ELSE (295)
ELSE (296) 48


Nonterminals, with rules where they appear

$accept (59)
    on left: 0
starter (60)
    on left: 1 2, on right: 0 1
builder (61)
    on left: 3 4, on right: 1 2
function (62)
    on left: 8, on right: 3
$@1 (63)
    on left: 5, on right: 8
$@2 (64)
    on left: 6, on right: 8
$@3 (65)
    on left: 7, on right: 8
type (66)
    on left: 9 10, on right: 8 28 52
pointer (67)
    on left: 11 12, on right: 9 11
data_type (68)
    on left: 13 14, on right: 9 10
sign_specifier (69)
    on left: 15 16, on right: 13
type_specifier (70)
    on left: 17 18 19 20 21 22 23, on right: 13 14
argument_list (71)
    on left: 24 25, on right: 8
arguments (72)
    on left: 26 27, on right: 24 26
arg (73)
    on left: 28, on right: 26 27
stmt (74)
    on left: 29 30, on right: 33 45 46 47 48 50
compound_stmt (75)
    on left: 32, on right: 8 29
$@4 (76)
    on left: 31, on right: 32
statements (77)
    on left: 33 34, on right: 32 33
single_stmt (78)
    on left: 35 36 37 38 39 40 41 42 43, on right: 30
for_block (79)
    on left: 45 46, on right: 36
$@5 (80)
    on left: 44, on right: 45
if_block (81)
    on left: 47 48, on right: 35
while_block (82)
    on left: 50, on right: 37
$@6 (83)
    on left: 49, on right: 50
declaration (84)
    on left: 52 53 54, on right: 4 38
$@7 (85)
    on left: 51, on right: 52
declaration_list (86)
    on left: 55 56, on right: 52 53 55
sub_decl (87)
    on left: 57 58 59, on right: 55 56
expression_stmt (88)
    on left: 60 61, on right: 45 46
expression (89)
    on left: 62 63, on right: 46 47 48 50 60 62
sub_expr (90)
    on left: 64 65 66 67 68 69 70 71 72 73 74 75, on right: 43 62 63
    64 65 66 67 68 69 70 71 72 103 108
assignment_expr (91)
    on left: 76 77 78 79 80, on right: 57 74
unary_expr (92)
    on left: 81 82 83 84, on right: 54 75 79 80
identifier (93)
    on left: 85, on right: 8 28 58 76 77 78 79 81 82 83 84 99 103 104
    105
assign_op (94)
    on left: 86 87 88 89 90 91, on right: 76 77 78 79 80
arithmetic_expr (95)
    on left: 92 93 94 95 96 97 98 99 100, on right: 73 76 92 93 94
    95 96 97 98
constant (96)
    on left: 101 102, on right: 100
array_index (97)
    on left: 103, on right: 59 77
function_call (98)
    on left: 104 105, on right: 39 78
parameter_list (99)
    on left: 106 107, on right: 104 106
parameter (100)
    on left: 108 109, on right: 106 107


State 0

    0 $accept: . starter $end

    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3
    SHORT       shift, and go to state 4
    INT         shift, and go to state 5
    LONG        shift, and go to state 6
    LONG_LONG   shift, and go to state 7
    SIGNED      shift, and go to state 8
    UNSIGNED    shift, and go to state 9

    starter           go to state 10
    builder           go to state 11
    function          go to state 12
    type              go to state 13
    data_type         go to state 14
    sign_specifier    go to state 15
    type_specifier    go to state 16
    declaration       go to state 17
    declaration_list  go to state 18
    sub_decl          go to state 19
    assignment_expr   go to state 20
    unary_expr        go to state 21
    identifier        go to state 22
    array_index       go to state 23


State 1

   85 identifier: IDENTIFIER .

    $default  reduce using rule 85 (identifier)


State 2

   84 unary_expr: INCREMENT . identifier

    IDENTIFIER  shift, and go to state 1

    identifier  go to state 24


State 3

   83 unary_expr: DECREMENT . identifier

    IDENTIFIER  shift, and go to state 1

    identifier  go to state 25


State 4

   18 type_specifier: SHORT . INT
   19               | SHORT .

    INT  shift, and go to state 26

    $default  reduce using rule 19 (type_specifier)


State 5

   17 type_specifier: INT .

    $default  reduce using rule 17 (type_specifier)


State 6

   20 type_specifier: LONG .
   21               | LONG . INT

    INT  shift, and go to state 27

    $default  reduce using rule 20 (type_specifier)


State 7

   22 type_specifier: LONG_LONG .
   23               | LONG_LONG . INT

    INT  shift, and go to state 28

    $default  reduce using rule 22 (type_specifier)


State 8

   15 sign_specifier: SIGNED .

    $default  reduce using rule 15 (sign_specifier)


State 9

   16 sign_specifier: UNSIGNED .

    $default  reduce using rule 16 (sign_specifier)


State 10

    0 $accept: starter . $end
    1 starter: starter . builder

    $end        shift, and go to state 29
    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3
    SHORT       shift, and go to state 4
    INT         shift, and go to state 5
    LONG        shift, and go to state 6
    LONG_LONG   shift, and go to state 7
    SIGNED      shift, and go to state 8
    UNSIGNED    shift, and go to state 9

    builder           go to state 30
    function          go to state 12
    type              go to state 13
    data_type         go to state 14
    sign_specifier    go to state 15
    type_specifier    go to state 16
    declaration       go to state 17
    declaration_list  go to state 18
    sub_decl          go to state 19
    assignment_expr   go to state 20
    unary_expr        go to state 21
    identifier        go to state 22
    array_index       go to state 23


State 11

    2 starter: builder .

    $default  reduce using rule 2 (starter)


State 12

    3 builder: function .

    $default  reduce using rule 3 (builder)


State 13

    8 function: type . $@1 identifier $@2 '(' argument_list ')' $@3 compound_stmt
   52 declaration: type . $@7 declaration_list ';'

    IDENTIFIER  reduce using rule 5 ($@1)
    IDENTIFIER  [reduce using rule 51 ($@7)]
    $default    reduce using rule 51 ($@7)

    $@1  go to state 31
    $@7  go to state 32


State 14

    9 type: data_type . pointer
   10     | data_type .

    '*'  shift, and go to state 33

    $default  reduce using rule 10 (type)

    pointer  go to state 34


State 15

   13 data_type: sign_specifier . type_specifier

    SHORT      shift, and go to state 4
    INT        shift, and go to state 5
    LONG       shift, and go to state 6
    LONG_LONG  shift, and go to state 7

    type_specifier  go to state 35


State 16

   14 data_type: type_specifier .

    $default  reduce using rule 14 (data_type)


State 17

    4 builder: declaration .

    $default  reduce using rule 4 (builder)


State 18

   53 declaration: declaration_list . ';'
   55 declaration_list: declaration_list . ',' sub_decl

    ','  shift, and go to state 36
    ';'  shift, and go to state 37


State 19

   56 declaration_list: sub_decl .

    $default  reduce using rule 56 (declaration_list)


State 20

   57 sub_decl: assignment_expr .

    $default  reduce using rule 57 (sub_decl)


State 21

   54 declaration: unary_expr . ';'
   80 assignment_expr: unary_expr . assign_op unary_expr

    MUL_ASSIGN  shift, and go to state 38
    DIV_ASSIGN  shift, and go to state 39
    MOD_ASSIGN  shift, and go to state 40
    ADD_ASSIGN  shift, and go to state 41
    SUB_ASSIGN  shift, and go to state 42
    '='         shift, and go to state 43
    ';'         shift, and go to state 44

    assign_op  go to state 45


State 22

   58 sub_decl: identifier .
   76 assignment_expr: identifier . assign_op arithmetic_expr
   77                | identifier . assign_op array_index
   78                | identifier . assign_op function_call
   79                | identifier . assign_op unary_expr
   81 unary_expr: identifier . INCREMENT
   82           | identifier . DECREMENT
  103 array_index: identifier . '[' sub_expr ']'

    MUL_ASSIGN  shift, and go to state 38
    DIV_ASSIGN  shift, and go to state 39
    MOD_ASSIGN  shift, and go to state 40
    ADD_ASSIGN  shift, and go to state 41
    SUB_ASSIGN  shift, and go to state 42
    INCREMENT   shift, and go to state 46
    DECREMENT   shift, and go to state 47
    '='         shift, and go to state 43
    '['         shift, and go to state 48

    $default  reduce using rule 58 (sub_decl)

    assign_op  go to state 49


State 23

   59 sub_decl: array_index .

    $default  reduce using rule 59 (sub_decl)


State 24

   84 unary_expr: INCREMENT identifier .

    $default  reduce using rule 84 (unary_expr)


State 25

   83 unary_expr: DECREMENT identifier .

    $default  reduce using rule 83 (unary_expr)


State 26

   18 type_specifier: SHORT INT .

    $default  reduce using rule 18 (type_specifier)


State 27

   21 type_specifier: LONG INT .

    $default  reduce using rule 21 (type_specifier)


State 28

   23 type_specifier: LONG_LONG INT .

    $default  reduce using rule 23 (type_specifier)


State 29

    0 $accept: starter $end .

    $default  accept


State 30

    1 starter: starter builder .

    $default  reduce using rule 1 (starter)


State 31

    8 function: type $@1 . identifier $@2 '(' argument_list ')' $@3 compound_stmt

    IDENTIFIER  shift, and go to state 1

    identifier  go to state 50


State 32

   52 declaration: type $@7 . declaration_list ';'

    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3

    declaration_list  go to state 51
    sub_decl          go to state 19
    assignment_expr   go to state 20
    unary_expr        go to state 52
    identifier        go to state 22
    array_index       go to state 23


State 33

   11 pointer: '*' . pointer
   12        | '*' .

    '*'  shift, and go to state 33

    $default  reduce using rule 12 (pointer)

    pointer  go to state 53


State 34

    9 type: data_type pointer .

    $default  reduce using rule 9 (type)


State 35

   13 data_type: sign_specifier type_specifier .

    $default  reduce using rule 13 (data_type)


State 36

   55 declaration_list: declaration_list ',' . sub_decl

    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3

    sub_decl         go to state 54
    assignment_expr  go to state 20
    unary_expr       go to state 52
    identifier       go to state 22
    array_index      go to state 23


State 37

   53 declaration: declaration_list ';' .

    $default  reduce using rule 53 (declaration)


State 38

   89 assign_op: MUL_ASSIGN .

    $default  reduce using rule 89 (assign_op)


State 39

   90 assign_op: DIV_ASSIGN .

    $default  reduce using rule 90 (assign_op)


State 40

   91 assign_op: MOD_ASSIGN .

    $default  reduce using rule 91 (assign_op)


State 41

   87 assign_op: ADD_ASSIGN .

    $default  reduce using rule 87 (assign_op)


State 42

   88 assign_op: SUB_ASSIGN .

    $default  reduce using rule 88 (assign_op)


State 43

   86 assign_op: '=' .

    $default  reduce using rule 86 (assign_op)


State 44

   54 declaration: unary_expr ';' .

    $default  reduce using rule 54 (declaration)


State 45

   80 assignment_expr: unary_expr assign_op . unary_expr

    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3

    unary_expr  go to state 55
    identifier  go to state 56


State 46

   81 unary_expr: identifier INCREMENT .

    $default  reduce using rule 81 (unary_expr)


State 47

   82 unary_expr: identifier DECREMENT .

    $default  reduce using rule 82 (unary_expr)


State 48

  103 array_index: identifier '[' . sub_expr ']'

    IDENTIFIER    shift, and go to state 1
    DEC_CONSTANT  shift, and go to state 57
    HEX_CONSTANT  shift, and go to state 58
    INCREMENT     shift, and go to state 2
    DECREMENT     shift, and go to state 3
    '-'           shift, and go to state 59
    '!'           shift, and go to state 60
    '('           shift, and go to state 61

    sub_expr         go to state 62
    assignment_expr  go to state 63
    unary_expr       go to state 64
    identifier       go to state 65
    arithmetic_expr  go to state 66
    constant         go to state 67


State 49

   76 assignment_expr: identifier assign_op . arithmetic_expr
   77                | identifier assign_op . array_index
   78                | identifier assign_op . function_call
   79                | identifier assign_op . unary_expr

    IDENTIFIER    shift, and go to state 1
    DEC_CONSTANT  shift, and go to state 57
    HEX_CONSTANT  shift, and go to state 58
    INCREMENT     shift, and go to state 2
    DECREMENT     shift, and go to state 3
    '-'           shift, and go to state 59
    '('           shift, and go to state 61

    unary_expr       go to state 68
    identifier       go to state 69
    arithmetic_expr  go to state 70
    constant         go to state 67
    array_index      go to state 71
    function_call    go to state 72


State 50

    8 function: type $@1 identifier . $@2 '(' argument_list ')' $@3 compound_stmt

    $default  reduce using rule 6 ($@2)

    $@2  go to state 73


State 51

   52 declaration: type $@7 declaration_list . ';'
   55 declaration_list: declaration_list . ',' sub_decl

    ','  shift, and go to state 36
    ';'  shift, and go to state 74


State 52

   80 assignment_expr: unary_expr . assign_op unary_expr

    MUL_ASSIGN  shift, and go to state 38
    DIV_ASSIGN  shift, and go to state 39
    MOD_ASSIGN  shift, and go to state 40
    ADD_ASSIGN  shift, and go to state 41
    SUB_ASSIGN  shift, and go to state 42
    '='         shift, and go to state 43

    assign_op  go to state 45


State 53

   11 pointer: '*' pointer .

    $default  reduce using rule 11 (pointer)


State 54

   55 declaration_list: declaration_list ',' sub_decl .

    $default  reduce using rule 55 (declaration_list)


State 55

   80 assignment_expr: unary_expr assign_op unary_expr .

    $default  reduce using rule 80 (assignment_expr)


State 56

   81 unary_expr: identifier . INCREMENT
   82           | identifier . DECREMENT

    INCREMENT  shift, and go to state 46
    DECREMENT  shift, and go to state 47


State 57

  101 constant: DEC_CONSTANT .

    $default  reduce using rule 101 (constant)


State 58

  102 constant: HEX_CONSTANT .

    $default  reduce using rule 102 (constant)


State 59

   98 arithmetic_expr: '-' . arithmetic_expr

    IDENTIFIER    shift, and go to state 1
    DEC_CONSTANT  shift, and go to state 57
    HEX_CONSTANT  shift, and go to state 58
    '-'           shift, and go to state 59
    '('           shift, and go to state 61

    identifier       go to state 75
    arithmetic_expr  go to state 76
    constant         go to state 67


State 60

   72 sub_expr: '!' . sub_expr

    IDENTIFIER    shift, and go to state 1
    DEC_CONSTANT  shift, and go to state 57
    HEX_CONSTANT  shift, and go to state 58
    INCREMENT     shift, and go to state 2
    DECREMENT     shift, and go to state 3
    '-'           shift, and go to state 59
    '!'           shift, and go to state 60
    '('           shift, and go to state 61

    sub_expr         go to state 77
    assignment_expr  go to state 63
    unary_expr       go to state 64
    identifier       go to state 65
    arithmetic_expr  go to state 66
    constant         go to state 67


State 61

   97 arithmetic_expr: '(' . arithmetic_expr ')'

    IDENTIFIER    shift, and go to state 1
    DEC_CONSTANT  shift, and go to state 57
    HEX_CONSTANT  shift, and go to state 58
    '-'           shift, and go to state 59
    '('           shift, and go to state 61

    identifier       go to state 75
    arithmetic_expr  go to state 78
    constant         go to state 67


State 62

   64 sub_expr: sub_expr . '>' sub_expr
   65         | sub_expr . '<' sub_expr
   66         | sub_expr . EQ sub_expr
   67         | sub_expr . NOT_EQ sub_expr
   68         | sub_expr . LS_EQ sub_expr
   69         | sub_expr . GR_EQ sub_expr
   70         | sub_expr . LOGICAL_AND sub_expr
   71         | sub_expr . LOGICAL_OR sub_expr
  103 array_index: identifier '[' sub_expr . ']'

    LOGICAL_AND  shift, and go to state 79
    LOGICAL_OR   shift, and go to state 80
    LS_EQ        shift, and go to state 81
    GR_EQ        shift, and go to state 82
    EQ           shift, and go to state 83
    NOT_EQ       shift, and go to state 84
    '<'          shift, and go to state 85
    '>'          shift, and go to state 86
    ']'          shift, and go to state 87


State 63

   74 sub_expr: assignment_expr .

    $default  reduce using rule 74 (sub_expr)


State 64

   75 sub_expr: unary_expr .
   80 assignment_expr: unary_expr . assign_op unary_expr

    MUL_ASSIGN  shift, and go to state 38
    DIV_ASSIGN  shift, and go to state 39
    MOD_ASSIGN  shift, and go to state 40
    ADD_ASSIGN  shift, and go to state 41
    SUB_ASSIGN  shift, and go to state 42
    '='         shift, and go to state 43

    $default  reduce using rule 75 (sub_expr)

    assign_op  go to state 45


State 65

   76 assignment_expr: identifier . assign_op arithmetic_expr
   77                | identifier . assign_op array_index
   78                | identifier . assign_op function_call
   79                | identifier . assign_op unary_expr
   81 unary_expr: identifier . INCREMENT
   82           | identifier . DECREMENT
   99 arithmetic_expr: identifier .

    MUL_ASSIGN  shift, and go to state 38
    DIV_ASSIGN  shift, and go to state 39
    MOD_ASSIGN  shift, and go to state 40
    ADD_ASSIGN  shift, and go to state 41
    SUB_ASSIGN  shift, and go to state 42
    INCREMENT   shift, and go to state 46
    DECREMENT   shift, and go to state 47
    '='         shift, and go to state 43

    $default  reduce using rule 99 (arithmetic_expr)

    assign_op  go to state 49


State 66

   73 sub_expr: arithmetic_expr .
   92 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   93                | arithmetic_expr . '-' arithmetic_expr
   94                | arithmetic_expr . '*' arithmetic_expr
   95                | arithmetic_expr . '/' arithmetic_expr
   96                | arithmetic_expr . '%' arithmetic_expr

    '+'  shift, and go to state 88
    '-'  shift, and go to state 89
    '*'  shift, and go to state 90
    '/'  shift, and go to state 91
    '%'  shift, and go to state 92

    $default  reduce using rule 73 (sub_expr)


State 67

  100 arithmetic_expr: constant .

    $default  reduce using rule 100 (arithmetic_expr)


State 68

   79 assignment_expr: identifier assign_op unary_expr .

    $default  reduce using rule 79 (assignment_expr)


State 69

   81 unary_expr: identifier . INCREMENT
   82           | identifier . DECREMENT
   99 arithmetic_expr: identifier .
  103 array_index: identifier . '[' sub_expr ']'
  104 function_call: identifier . '(' parameter_list ')'
  105              | identifier . '(' ')'

    INCREMENT  shift, and go to state 46
    DECREMENT  shift, and go to state 47
    '('        shift, and go to state 93
    '['        shift, and go to state 48

    $default  reduce using rule 99 (arithmetic_expr)


State 70

   76 assignment_expr: identifier assign_op arithmetic_expr .
   92 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   93                | arithmetic_expr . '-' arithmetic_expr
   94                | arithmetic_expr . '*' arithmetic_expr
   95                | arithmetic_expr . '/' arithmetic_expr
   96                | arithmetic_expr . '%' arithmetic_expr

    '+'  shift, and go to state 88
    '-'  shift, and go to state 89
    '*'  shift, and go to state 90
    '/'  shift, and go to state 91
    '%'  shift, and go to state 92

    $default  reduce using rule 76 (assignment_expr)


State 71

   77 assignment_expr: identifier assign_op array_index .

    $default  reduce using rule 77 (assignment_expr)


State 72

   78 assignment_expr: identifier assign_op function_call .

    $default  reduce using rule 78 (assignment_expr)


State 73

    8 function: type $@1 identifier $@2 . '(' argument_list ')' $@3 compound_stmt

    '('  shift, and go to state 94


State 74

   52 declaration: type $@7 declaration_list ';' .

    $default  reduce using rule 52 (declaration)


State 75

   99 arithmetic_expr: identifier .

    $default  reduce using rule 99 (arithmetic_expr)


State 76

   92 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   93                | arithmetic_expr . '-' arithmetic_expr
   94                | arithmetic_expr . '*' arithmetic_expr
   95                | arithmetic_expr . '/' arithmetic_expr
   96                | arithmetic_expr . '%' arithmetic_expr
   98                | '-' arithmetic_expr .

    $default  reduce using rule 98 (arithmetic_expr)


State 77

   64 sub_expr: sub_expr . '>' sub_expr
   65         | sub_expr . '<' sub_expr
   66         | sub_expr . EQ sub_expr
   67         | sub_expr . NOT_EQ sub_expr
   68         | sub_expr . LS_EQ sub_expr
   69         | sub_expr . GR_EQ sub_expr
   70         | sub_expr . LOGICAL_AND sub_expr
   71         | sub_expr . LOGICAL_OR sub_expr
   72         | '!' sub_expr .

    $default  reduce using rule 72 (sub_expr)


State 78

   92 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   93                | arithmetic_expr . '-' arithmetic_expr
   94                | arithmetic_expr . '*' arithmetic_expr
   95                | arithmetic_expr . '/' arithmetic_expr
   96                | arithmetic_expr . '%' arithmetic_expr
   97                | '(' arithmetic_expr . ')'

    '+'  shift, and go to state 88
    '-'  shift, and go to state 89
    '*'  shift, and go to state 90
    '/'  shift, and go to state 91
    '%'  shift, and go to state 92
    ')'  shift, and go to state 95


State 79

   70 sub_expr: sub_expr LOGICAL_AND . sub_expr

    IDENTIFIER    shift, and go to state 1
    DEC_CONSTANT  shift, and go to state 57
    HEX_CONSTANT  shift, and go to state 58
    INCREMENT     shift, and go to state 2
    DECREMENT     shift, and go to state 3
    '-'           shift, and go to state 59
    '!'           shift, and go to state 60
    '('           shift, and go to state 61

    sub_expr         go to state 96
    assignment_expr  go to state 63
    unary_expr       go to state 64
    identifier       go to state 65
    arithmetic_expr  go to state 66
    constant         go to state 67


State 80

   71 sub_expr: sub_expr LOGICAL_OR . sub_expr

    IDENTIFIER    shift, and go to state 1
    DEC_CONSTANT  shift, and go to state 57
    HEX_CONSTANT  shift, and go to state 58
    INCREMENT     shift, and go to state 2
    DECREMENT     shift, and go to state 3
    '-'           shift, and go to state 59
    '!'           shift, and go to state 60
    '('           shift, and go to state 61

    sub_expr         go to state 97
    assignment_expr  go to state 63
    unary_expr       go to state 64
    identifier       go to state 65
    arithmetic_expr  go to state 66
    constant         go to state 67


State 81

   68 sub_expr: sub_expr LS_EQ . sub_expr

    IDENTIFIER    shift, and go to state 1
    DEC_CONSTANT  shift, and go to state 57
    HEX_CONSTANT  shift, and go to state 58
    INCREMENT     shift, and go to state 2
    DECREMENT     shift, and go to state 3
    '-'           shift, and go to state 59
    '!'           shift, and go to state 60
    '('           shift, and go to state 61

    sub_expr         go to state 98
    assignment_expr  go to state 63
    unary_expr       go to state 64
    identifier       go to state 65
    arithmetic_expr  go to state 66
    constant         go to state 67


State 82

   69 sub_expr: sub_expr GR_EQ . sub_expr

    IDENTIFIER    shift, and go to state 1
    DEC_CONSTANT  shift, and go to state 57
    HEX_CONSTANT  shift, and go to state 58
    INCREMENT     shift, and go to state 2
    DECREMENT     shift, and go to state 3
    '-'           shift, and go to state 59
    '!'           shift, and go to state 60
    '('           shift, and go to state 61

    sub_expr         go to state 99
    assignment_expr  go to state 63
    unary_expr       go to state 64
    identifier       go to state 65
    arithmetic_expr  go to state 66
    constant         go to state 67


State 83

   66 sub_expr: sub_expr EQ . sub_expr

    IDENTIFIER    shift, and go to state 1
    DEC_CONSTANT  shift, and go to state 57
    HEX_CONSTANT  shift, and go to state 58
    INCREMENT     shift, and go to state 2
    DECREMENT     shift, and go to state 3
    '-'           shift, and go to state 59
    '!'           shift, and go to state 60
    '('           shift, and go to state 61

    sub_expr         go to state 100
    assignment_expr  go to state 63
    unary_expr       go to state 64
    identifier       go to state 65
    arithmetic_expr  go to state 66
    constant         go to state 67


State 84

   67 sub_expr: sub_expr NOT_EQ . sub_expr

    IDENTIFIER    shift, and go to state 1
    DEC_CONSTANT  shift, and go to state 57
    HEX_CONSTANT  shift, and go to state 58
    INCREMENT     shift, and go to state 2
    DECREMENT     shift, and go to state 3
    '-'           shift, and go to state 59
    '!'           shift, and go to state 60
    '('           shift, and go to state 61

    sub_expr         go to state 101
    assignment_expr  go to state 63
    unary_expr       go to state 64
    identifier       go to state 65
    arithmetic_expr  go to state 66
    constant         go to state 67


State 85

   65 sub_expr: sub_expr '<' . sub_expr

    IDENTIFIER    shift, and go to state 1
    DEC_CONSTANT  shift, and go to state 57
    HEX_CONSTANT  shift, and go to state 58
    INCREMENT     shift, and go to state 2
    DECREMENT     shift, and go to state 3
    '-'           shift, and go to state 59
    '!'           shift, and go to state 60
    '('           shift, and go to state 61

    sub_expr         go to state 102
    assignment_expr  go to state 63
    unary_expr       go to state 64
    identifier       go to state 65
    arithmetic_expr  go to state 66
    constant         go to state 67


State 86

   64 sub_expr: sub_expr '>' . sub_expr

    IDENTIFIER    shift, and go to state 1
    DEC_CONSTANT  shift, and go to state 57
    HEX_CONSTANT  shift, and go to state 58
    INCREMENT     shift, and go to state 2
    DECREMENT     shift, and go to state 3
    '-'           shift, and go to state 59
    '!'           shift, and go to state 60
    '('           shift, and go to state 61

    sub_expr         go to state 103
    assignment_expr  go to state 63
    unary_expr       go to state 64
    identifier       go to state 65
    arithmetic_expr  go to state 66
    constant         go to state 67


State 87

  103 array_index: identifier '[' sub_expr ']' .

    $default  reduce using rule 103 (array_index)


State 88

   92 arithmetic_expr: arithmetic_expr '+' . arithmetic_expr

    IDENTIFIER    shift, and go to state 1
    DEC_CONSTANT  shift, and go to state 57
    HEX_CONSTANT  shift, and go to state 58
    '-'           shift, and go to state 59
    '('           shift, and go to state 61

    identifier       go to state 75
    arithmetic_expr  go to state 104
    constant         go to state 67


State 89

   93 arithmetic_expr: arithmetic_expr '-' . arithmetic_expr

    IDENTIFIER    shift, and go to state 1
    DEC_CONSTANT  shift, and go to state 57
    HEX_CONSTANT  shift, and go to state 58
    '-'           shift, and go to state 59
    '('           shift, and go to state 61

    identifier       go to state 75
    arithmetic_expr  go to state 105
    constant         go to state 67


State 90

   94 arithmetic_expr: arithmetic_expr '*' . arithmetic_expr

    IDENTIFIER    shift, and go to state 1
    DEC_CONSTANT  shift, and go to state 57
    HEX_CONSTANT  shift, and go to state 58
    '-'           shift, and go to state 59
    '('           shift, and go to state 61

    identifier       go to state 75
    arithmetic_expr  go to state 106
    constant         go to state 67


State 91

   95 arithmetic_expr: arithmetic_expr '/' . arithmetic_expr

    IDENTIFIER    shift, and go to state 1
    DEC_CONSTANT  shift, and go to state 57
    HEX_CONSTANT  shift, and go to state 58
    '-'           shift, and go to state 59
    '('           shift, and go to state 61

    identifier       go to state 75
    arithmetic_expr  go to state 107
    constant         go to state 67


State 92

   96 arithmetic_expr: arithmetic_expr '%' . arithmetic_expr

    IDENTIFIER    shift, and go to state 1
    DEC_CONSTANT  shift, and go to state 57
    HEX_CONSTANT  shift, and go to state 58
    '-'           shift, and go to state 59
    '('           shift, and go to state 61

    identifier       go to state 75
    arithmetic_expr  go to state 108
    constant         go to state 67


State 93

  104 function_call: identifier '(' . parameter_list ')'
  105              | identifier '(' . ')'

    IDENTIFIER    shift, and go to state 1
    DEC_CONSTANT  shift, and go to state 57
    HEX_CONSTANT  shift, and go to state 58
    STRING        shift, and go to state 109
    INCREMENT     shift, and go to state 2
    DECREMENT     shift, and go to state 3
    '-'           shift, and go to state 59
    '!'           shift, and go to state 60
    '('           shift, and go to state 61
    ')'           shift, and go to state 110

    sub_expr         go to state 111
    assignment_expr  go to state 63
    unary_expr       go to state 64
    identifier       go to state 65
    arithmetic_expr  go to state 66
    constant         go to state 67
    parameter_list   go to state 112
    parameter        go to state 113


State 94

    8 function: type $@1 identifier $@2 '(' . argument_list ')' $@3 compound_stmt

    SHORT      shift, and go to state 4
    INT        shift, and go to state 5
    LONG       shift, and go to state 6
    LONG_LONG  shift, and go to state 7
    SIGNED     shift, and go to state 8
    UNSIGNED   shift, and go to state 9

    $default  reduce using rule 25 (argument_list)

    type            go to state 114
    data_type       go to state 14
    sign_specifier  go to state 15
    type_specifier  go to state 16
    argument_list   go to state 115
    arguments       go to state 116
    arg             go to state 117


State 95

   97 arithmetic_expr: '(' arithmetic_expr ')' .

    $default  reduce using rule 97 (arithmetic_expr)


State 96

   64 sub_expr: sub_expr . '>' sub_expr
   65         | sub_expr . '<' sub_expr
   66         | sub_expr . EQ sub_expr
   67         | sub_expr . NOT_EQ sub_expr
   68         | sub_expr . LS_EQ sub_expr
   69         | sub_expr . GR_EQ sub_expr
   70         | sub_expr . LOGICAL_AND sub_expr
   70         | sub_expr LOGICAL_AND sub_expr .
   71         | sub_expr . LOGICAL_OR sub_expr

    LS_EQ   shift, and go to state 81
    GR_EQ   shift, and go to state 82
    EQ      shift, and go to state 83
    NOT_EQ  shift, and go to state 84
    '<'     shift, and go to state 85
    '>'     shift, and go to state 86

    $default  reduce using rule 70 (sub_expr)


State 97

   64 sub_expr: sub_expr . '>' sub_expr
   65         | sub_expr . '<' sub_expr
   66         | sub_expr . EQ sub_expr
   67         | sub_expr . NOT_EQ sub_expr
   68         | sub_expr . LS_EQ sub_expr
   69         | sub_expr . GR_EQ sub_expr
   70         | sub_expr . LOGICAL_AND sub_expr
   71         | sub_expr . LOGICAL_OR sub_expr
   71         | sub_expr LOGICAL_OR sub_expr .

    LOGICAL_AND  shift, and go to state 79
    LS_EQ        shift, and go to state 81
    GR_EQ        shift, and go to state 82
    EQ           shift, and go to state 83
    NOT_EQ       shift, and go to state 84
    '<'          shift, and go to state 85
    '>'          shift, and go to state 86

    $default  reduce using rule 71 (sub_expr)


State 98

   64 sub_expr: sub_expr . '>' sub_expr
   65         | sub_expr . '<' sub_expr
   66         | sub_expr . EQ sub_expr
   67         | sub_expr . NOT_EQ sub_expr
   68         | sub_expr . LS_EQ sub_expr
   68         | sub_expr LS_EQ sub_expr .
   69         | sub_expr . GR_EQ sub_expr
   70         | sub_expr . LOGICAL_AND sub_expr
   71         | sub_expr . LOGICAL_OR sub_expr

    $default  reduce using rule 68 (sub_expr)


State 99

   64 sub_expr: sub_expr . '>' sub_expr
   65         | sub_expr . '<' sub_expr
   66         | sub_expr . EQ sub_expr
   67         | sub_expr . NOT_EQ sub_expr
   68         | sub_expr . LS_EQ sub_expr
   69         | sub_expr . GR_EQ sub_expr
   69         | sub_expr GR_EQ sub_expr .
   70         | sub_expr . LOGICAL_AND sub_expr
   71         | sub_expr . LOGICAL_OR sub_expr

    $default  reduce using rule 69 (sub_expr)


State 100

   64 sub_expr: sub_expr . '>' sub_expr
   65         | sub_expr . '<' sub_expr
   66         | sub_expr . EQ sub_expr
   66         | sub_expr EQ sub_expr .
   67         | sub_expr . NOT_EQ sub_expr
   68         | sub_expr . LS_EQ sub_expr
   69         | sub_expr . GR_EQ sub_expr
   70         | sub_expr . LOGICAL_AND sub_expr
   71         | sub_expr . LOGICAL_OR sub_expr

    LS_EQ  shift, and go to state 81
    GR_EQ  shift, and go to state 82
    '<'    shift, and go to state 85
    '>'    shift, and go to state 86

    $default  reduce using rule 66 (sub_expr)


State 101

   64 sub_expr: sub_expr . '>' sub_expr
   65         | sub_expr . '<' sub_expr
   66         | sub_expr . EQ sub_expr
   67         | sub_expr . NOT_EQ sub_expr
   67         | sub_expr NOT_EQ sub_expr .
   68         | sub_expr . LS_EQ sub_expr
   69         | sub_expr . GR_EQ sub_expr
   70         | sub_expr . LOGICAL_AND sub_expr
   71         | sub_expr . LOGICAL_OR sub_expr

    LS_EQ  shift, and go to state 81
    GR_EQ  shift, and go to state 82
    '<'    shift, and go to state 85
    '>'    shift, and go to state 86

    $default  reduce using rule 67 (sub_expr)


State 102

   64 sub_expr: sub_expr . '>' sub_expr
   65         | sub_expr . '<' sub_expr
   65         | sub_expr '<' sub_expr .
   66         | sub_expr . EQ sub_expr
   67         | sub_expr . NOT_EQ sub_expr
   68         | sub_expr . LS_EQ sub_expr
   69         | sub_expr . GR_EQ sub_expr
   70         | sub_expr . LOGICAL_AND sub_expr
   71         | sub_expr . LOGICAL_OR sub_expr

    $default  reduce using rule 65 (sub_expr)


State 103

   64 sub_expr: sub_expr . '>' sub_expr
   64         | sub_expr '>' sub_expr .
   65         | sub_expr . '<' sub_expr
   66         | sub_expr . EQ sub_expr
   67         | sub_expr . NOT_EQ sub_expr
   68         | sub_expr . LS_EQ sub_expr
   69         | sub_expr . GR_EQ sub_expr
   70         | sub_expr . LOGICAL_AND sub_expr
   71         | sub_expr . LOGICAL_OR sub_expr

    $default  reduce using rule 64 (sub_expr)


State 104

   92 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   92                | arithmetic_expr '+' arithmetic_expr .
   93                | arithmetic_expr . '-' arithmetic_expr
   94                | arithmetic_expr . '*' arithmetic_expr
   95                | arithmetic_expr . '/' arithmetic_expr
   96                | arithmetic_expr . '%' arithmetic_expr

    '*'  shift, and go to state 90
    '/'  shift, and go to state 91
    '%'  shift, and go to state 92

    $default  reduce using rule 92 (arithmetic_expr)


State 105

   92 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   93                | arithmetic_expr . '-' arithmetic_expr
   93                | arithmetic_expr '-' arithmetic_expr .
   94                | arithmetic_expr . '*' arithmetic_expr
   95                | arithmetic_expr . '/' arithmetic_expr
   96                | arithmetic_expr . '%' arithmetic_expr

    '*'  shift, and go to state 90
    '/'  shift, and go to state 91
    '%'  shift, and go to state 92

    $default  reduce using rule 93 (arithmetic_expr)


State 106

   92 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   93                | arithmetic_expr . '-' arithmetic_expr
   94                | arithmetic_expr . '*' arithmetic_expr
   94                | arithmetic_expr '*' arithmetic_expr .
   95                | arithmetic_expr . '/' arithmetic_expr
   96                | arithmetic_expr . '%' arithmetic_expr

    $default  reduce using rule 94 (arithmetic_expr)


State 107

   92 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   93                | arithmetic_expr . '-' arithmetic_expr
   94                | arithmetic_expr . '*' arithmetic_expr
   95                | arithmetic_expr . '/' arithmetic_expr
   95                | arithmetic_expr '/' arithmetic_expr .
   96                | arithmetic_expr . '%' arithmetic_expr

    $default  reduce using rule 95 (arithmetic_expr)


State 108

   92 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   93                | arithmetic_expr . '-' arithmetic_expr
   94                | arithmetic_expr . '*' arithmetic_expr
   95                | arithmetic_expr . '/' arithmetic_expr
   96                | arithmetic_expr . '%' arithmetic_expr
   96                | arithmetic_expr '%' arithmetic_expr .

    $default  reduce using rule 96 (arithmetic_expr)


State 109

  109 parameter: STRING .

    $default  reduce using rule 109 (parameter)


State 110

  105 function_call: identifier '(' ')' .

    $default  reduce using rule 105 (function_call)


State 111

   64 sub_expr: sub_expr . '>' sub_expr
   65         | sub_expr . '<' sub_expr
   66         | sub_expr . EQ sub_expr
   67         | sub_expr . NOT_EQ sub_expr
   68         | sub_expr . LS_EQ sub_expr
   69         | sub_expr . GR_EQ sub_expr
   70         | sub_expr . LOGICAL_AND sub_expr
   71         | sub_expr . LOGICAL_OR sub_expr
  108 parameter: sub_expr .

    LOGICAL_AND  shift, and go to state 79
    LOGICAL_OR   shift, and go to state 80
    LS_EQ        shift, and go to state 81
    GR_EQ        shift, and go to state 82
    EQ           shift, and go to state 83
    NOT_EQ       shift, and go to state 84
    '<'          shift, and go to state 85
    '>'          shift, and go to state 86

    $default  reduce using rule 108 (parameter)


State 112

  104 function_call: identifier '(' parameter_list . ')'
  106 parameter_list: parameter_list . ',' parameter

    ','  shift, and go to state 118
    ')'  shift, and go to state 119


State 113

  107 parameter_list: parameter .

    $default  reduce using rule 107 (parameter_list)


State 114

   28 arg: type . identifier

    IDENTIFIER  shift, and go to state 1

    identifier  go to state 120


State 115

    8 function: type $@1 identifier $@2 '(' argument_list . ')' $@3 compound_stmt

    ')'  shift, and go to state 121


State 116

   24 argument_list: arguments .
   26 arguments: arguments . ',' arg

    ','  shift, and go to state 122

    $default  reduce using rule 24 (argument_list)


State 117

   27 arguments: arg .

    $default  reduce using rule 27 (arguments)


State 118

  106 parameter_list: parameter_list ',' . parameter

    IDENTIFIER    shift, and go to state 1
    DEC_CONSTANT  shift, and go to state 57
    HEX_CONSTANT  shift, and go to state 58
    STRING        shift, and go to state 109
    INCREMENT     shift, and go to state 2
    DECREMENT     shift, and go to state 3
    '-'           shift, and go to state 59
    '!'           shift, and go to state 60
    '('           shift, and go to state 61

    sub_expr         go to state 111
    assignment_expr  go to state 63
    unary_expr       go to state 64
    identifier       go to state 65
    arithmetic_expr  go to state 66
    constant         go to state 67
    parameter        go to state 123


State 119

  104 function_call: identifier '(' parameter_list ')' .

    $default  reduce using rule 104 (function_call)


State 120

   28 arg: type identifier .

    $default  reduce using rule 28 (arg)


State 121

    8 function: type $@1 identifier $@2 '(' argument_list ')' . $@3 compound_stmt

    $default  reduce using rule 7 ($@3)

    $@3  go to state 124


State 122

   26 arguments: arguments ',' . arg

    SHORT      shift, and go to state 4
    INT        shift, and go to state 5
    LONG       shift, and go to state 6
    LONG_LONG  shift, and go to state 7
    SIGNED     shift, and go to state 8
    UNSIGNED   shift, and go to state 9

    type            go to state 114
    data_type       go to state 14
    sign_specifier  go to state 15
    type_specifier  go to state 16
    arg             go to state 125


State 123

  106 parameter_list: parameter_list ',' parameter .

    $default  reduce using rule 106 (parameter_list)


State 124

    8 function: type $@1 identifier $@2 '(' argument_list ')' $@3 . compound_stmt

    '{'  shift, and go to state 126

    compound_stmt  go to state 127


State 125

   26 arguments: arguments ',' arg .

    $default  reduce using rule 26 (arguments)


State 126

   32 compound_stmt: '{' . $@4 statements '}'

    $default  reduce using rule 31 ($@4)

    $@4  go to state 128


State 127

    8 function: type $@1 identifier $@2 '(' argument_list ')' $@3 compound_stmt .

    $default  reduce using rule 8 (function)


State 128

   32 compound_stmt: '{' $@4 . statements '}'

    $default  reduce using rule 34 (statements)

    statements  go to state 129


State 129

   32 compound_stmt: '{' $@4 statements . '}'
   33 statements: statements . stmt

    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3
    SHORT       shift, and go to state 4
    INT         shift, and go to state 5
    LONG        shift, and go to state 6
    LONG_LONG   shift, and go to state 7
    SIGNED      shift, and go to state 8
    UNSIGNED    shift, and go to state 9
    IF          shift, and go to state 130
    FOR         shift, and go to state 131
    WHILE       shift, and go to state 132
    CONTINUE    shift, and go to state 133
    BREAK       shift, and go to state 134
    RETURN      shift, and go to state 135
    '{'         shift, and go to state 126
    '}'         shift, and go to state 136

    type              go to state 137
    data_type         go to state 14
    sign_specifier    go to state 15
    type_specifier    go to state 16
    stmt              go to state 138
    compound_stmt     go to state 139
    single_stmt       go to state 140
    for_block         go to state 141
    if_block          go to state 142
    while_block       go to state 143
    declaration       go to state 144
    declaration_list  go to state 18
    sub_decl          go to state 19
    assignment_expr   go to state 20
    unary_expr        go to state 21
    identifier        go to state 145
    array_index       go to state 23
    function_call     go to state 146


State 130

   47 if_block: IF . '(' expression ')' stmt
   48         | IF . '(' expression ')' stmt ELSE stmt

    '('  shift, and go to state 147


State 131

   45 for_block: FOR . '(' expression_stmt expression_stmt ')' $@5 stmt
   46          | FOR . '(' expression_stmt expression_stmt expression ')' stmt

    '('  shift, and go to state 148


State 132

   50 while_block: WHILE . '(' expression ')' $@6 stmt

    '('  shift, and go to state 149


State 133

   41 single_stmt: CONTINUE . ';'

    ';'  shift, and go to state 150


State 134

   42 single_stmt: BREAK . ';'

    ';'  shift, and go to state 151


State 135

   40 single_stmt: RETURN . ';'
   43            | RETURN . sub_expr ';'

    IDENTIFIER    shift, and go to state 1
    DEC_CONSTANT  shift, and go to state 57
    HEX_CONSTANT  shift, and go to state 58
    INCREMENT     shift, and go to state 2
    DECREMENT     shift, and go to state 3
    '-'           shift, and go to state 59
    '!'           shift, and go to state 60
    '('           shift, and go to state 61
    ';'           shift, and go to state 152

    sub_expr         go to state 153
    assignment_expr  go to state 63
    unary_expr       go to state 64
    identifier       go to state 65
    arithmetic_expr  go to state 66
    constant         go to state 67


State 136

   32 compound_stmt: '{' $@4 statements '}' .

    $default  reduce using rule 32 (compound_stmt)


State 137

   52 declaration: type . $@7 declaration_list ';'

    $default  reduce using rule 51 ($@7)

    $@7  go to state 32


State 138

   33 statements: statements stmt .

    $default  reduce using rule 33 (statements)


State 139

   29 stmt: compound_stmt .

    $default  reduce using rule 29 (stmt)


State 140

   30 stmt: single_stmt .

    $default  reduce using rule 30 (stmt)


State 141

   36 single_stmt: for_block .

    $default  reduce using rule 36 (single_stmt)


State 142

   35 single_stmt: if_block .

    $default  reduce using rule 35 (single_stmt)


State 143

   37 single_stmt: while_block .

    $default  reduce using rule 37 (single_stmt)


State 144

   38 single_stmt: declaration .

    $default  reduce using rule 38 (single_stmt)


State 145

   58 sub_decl: identifier .
   76 assignment_expr: identifier . assign_op arithmetic_expr
   77                | identifier . assign_op array_index
   78                | identifier . assign_op function_call
   79                | identifier . assign_op unary_expr
   81 unary_expr: identifier . INCREMENT
   82           | identifier . DECREMENT
  103 array_index: identifier . '[' sub_expr ']'
  104 function_call: identifier . '(' parameter_list ')'
  105              | identifier . '(' ')'

    MUL_ASSIGN  shift, and go to state 38
    DIV_ASSIGN  shift, and go to state 39
    MOD_ASSIGN  shift, and go to state 40
    ADD_ASSIGN  shift, and go to state 41
    SUB_ASSIGN  shift, and go to state 42
    INCREMENT   shift, and go to state 46
    DECREMENT   shift, and go to state 47
    '='         shift, and go to state 43
    '('         shift, and go to state 93
    '['         shift, and go to state 48

    $default  reduce using rule 58 (sub_decl)

    assign_op  go to state 49


State 146

   39 single_stmt: function_call . ';'

    ';'  shift, and go to state 154


State 147

   47 if_block: IF '(' . expression ')' stmt
   48         | IF '(' . expression ')' stmt ELSE stmt

    IDENTIFIER    shift, and go to state 1
    DEC_CONSTANT  shift, and go to state 57
    HEX_CONSTANT  shift, and go to state 58
    INCREMENT     shift, and go to state 2
    DECREMENT     shift, and go to state 3
    '-'           shift, and go to state 59
    '!'           shift, and go to state 60
    '('           shift, and go to state 61

    expression       go to state 155
    sub_expr         go to state 156
    assignment_expr  go to state 63
    unary_expr       go to state 64
    identifier       go to state 65
    arithmetic_expr  go to state 66
    constant         go to state 67


State 148

   45 for_block: FOR '(' . expression_stmt expression_stmt ')' $@5 stmt
   46          | FOR '(' . expression_stmt expression_stmt expression ')' stmt

    IDENTIFIER    shift, and go to state 1
    DEC_CONSTANT  shift, and go to state 57
    HEX_CONSTANT  shift, and go to state 58
    INCREMENT     shift, and go to state 2
    DECREMENT     shift, and go to state 3
    '-'           shift, and go to state 59
    '!'           shift, and go to state 60
    '('           shift, and go to state 61
    ';'           shift, and go to state 157

    expression_stmt  go to state 158
    expression       go to state 159
    sub_expr         go to state 156
    assignment_expr  go to state 63
    unary_expr       go to state 64
    identifier       go to state 65
    arithmetic_expr  go to state 66
    constant         go to state 67


State 149

   50 while_block: WHILE '(' . expression ')' $@6 stmt

    IDENTIFIER    shift, and go to state 1
    DEC_CONSTANT  shift, and go to state 57
    HEX_CONSTANT  shift, and go to state 58
    INCREMENT     shift, and go to state 2
    DECREMENT     shift, and go to state 3
    '-'           shift, and go to state 59
    '!'           shift, and go to state 60
    '('           shift, and go to state 61

    expression       go to state 160
    sub_expr         go to state 156
    assignment_expr  go to state 63
    unary_expr       go to state 64
    identifier       go to state 65
    arithmetic_expr  go to state 66
    constant         go to state 67


State 150

   41 single_stmt: CONTINUE ';' .

    $default  reduce using rule 41 (single_stmt)


State 151

   42 single_stmt: BREAK ';' .

    $default  reduce using rule 42 (single_stmt)


State 152

   40 single_stmt: RETURN ';' .

    $default  reduce using rule 40 (single_stmt)


State 153

   43 single_stmt: RETURN sub_expr . ';'
   64 sub_expr: sub_expr . '>' sub_expr
   65         | sub_expr . '<' sub_expr
   66         | sub_expr . EQ sub_expr
   67         | sub_expr . NOT_EQ sub_expr
   68         | sub_expr . LS_EQ sub_expr
   69         | sub_expr . GR_EQ sub_expr
   70         | sub_expr . LOGICAL_AND sub_expr
   71         | sub_expr . LOGICAL_OR sub_expr

    LOGICAL_AND  shift, and go to state 79
    LOGICAL_OR   shift, and go to state 80
    LS_EQ        shift, and go to state 81
    GR_EQ        shift, and go to state 82
    EQ           shift, and go to state 83
    NOT_EQ       shift, and go to state 84
    '<'          shift, and go to state 85
    '>'          shift, and go to state 86
    ';'          shift, and go to state 161


State 154

   39 single_stmt: function_call ';' .

    $default  reduce using rule 39 (single_stmt)


State 155

   47 if_block: IF '(' expression . ')' stmt
   48         | IF '(' expression . ')' stmt ELSE stmt
   62 expression: expression . ',' sub_expr

    ','  shift, and go to state 162
    ')'  shift, and go to state 163


State 156

   63 expression: sub_expr .
   64 sub_expr: sub_expr . '>' sub_expr
   65         | sub_expr . '<' sub_expr
   66         | sub_expr . EQ sub_expr
   67         | sub_expr . NOT_EQ sub_expr
   68         | sub_expr . LS_EQ sub_expr
   69         | sub_expr . GR_EQ sub_expr
   70         | sub_expr . LOGICAL_AND sub_expr
   71         | sub_expr . LOGICAL_OR sub_expr

    LOGICAL_AND  shift, and go to state 79
    LOGICAL_OR   shift, and go to state 80
    LS_EQ        shift, and go to state 81
    GR_EQ        shift, and go to state 82
    EQ           shift, and go to state 83
    NOT_EQ       shift, and go to state 84
    '<'          shift, and go to state 85
    '>'          shift, and go to state 86

    $default  reduce using rule 63 (expression)


State 157

   61 expression_stmt: ';' .

    $default  reduce using rule 61 (expression_stmt)


State 158

   45 for_block: FOR '(' expression_stmt . expression_stmt ')' $@5 stmt
   46          | FOR '(' expression_stmt . expression_stmt expression ')' stmt

    IDENTIFIER    shift, and go to state 1
    DEC_CONSTANT  shift, and go to state 57
    HEX_CONSTANT  shift, and go to state 58
    INCREMENT     shift, and go to state 2
    DECREMENT     shift, and go to state 3
    '-'           shift, and go to state 59
    '!'           shift, and go to state 60
    '('           shift, and go to state 61
    ';'           shift, and go to state 157

    expression_stmt  go to state 164
    expression       go to state 159
    sub_expr         go to state 156
    assignment_expr  go to state 63
    unary_expr       go to state 64
    identifier       go to state 65
    arithmetic_expr  go to state 66
    constant         go to state 67


State 159

   60 expression_stmt: expression . ';'
   62 expression: expression . ',' sub_expr

    ','  shift, and go to state 162
    ';'  shift, and go to state 165


State 160

   50 while_block: WHILE '(' expression . ')' $@6 stmt
   62 expression: expression . ',' sub_expr

    ','  shift, and go to state 162
    ')'  shift, and go to state 166


State 161

   43 single_stmt: RETURN sub_expr ';' .

    $default  reduce using rule 43 (single_stmt)


State 162

   62 expression: expression ',' . sub_expr

    IDENTIFIER    shift, and go to state 1
    DEC_CONSTANT  shift, and go to state 57
    HEX_CONSTANT  shift, and go to state 58
    INCREMENT     shift, and go to state 2
    DECREMENT     shift, and go to state 3
    '-'           shift, and go to state 59
    '!'           shift, and go to state 60
    '('           shift, and go to state 61

    sub_expr         go to state 167
    assignment_expr  go to state 63
    unary_expr       go to state 64
    identifier       go to state 65
    arithmetic_expr  go to state 66
    constant         go to state 67


State 163

   47 if_block: IF '(' expression ')' . stmt
   48         | IF '(' expression ')' . stmt ELSE stmt

    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3
    SHORT       shift, and go to state 4
    INT         shift, and go to state 5
    LONG        shift, and go to state 6
    LONG_LONG   shift, and go to state 7
    SIGNED      shift, and go to state 8
    UNSIGNED    shift, and go to state 9
    IF          shift, and go to state 130
    FOR         shift, and go to state 131
    WHILE       shift, and go to state 132
    CONTINUE    shift, and go to state 133
    BREAK       shift, and go to state 134
    RETURN      shift, and go to state 135
    '{'         shift, and go to state 126

    type              go to state 137
    data_type         go to state 14
    sign_specifier    go to state 15
    type_specifier    go to state 16
    stmt              go to state 168
    compound_stmt     go to state 139
    single_stmt       go to state 140
    for_block         go to state 141
    if_block          go to state 142
    while_block       go to state 143
    declaration       go to state 144
    declaration_list  go to state 18
    sub_decl          go to state 19
    assignment_expr   go to state 20
    unary_expr        go to state 21
    identifier        go to state 145
    array_index       go to state 23
    function_call     go to state 146


State 164

   45 for_block: FOR '(' expression_stmt expression_stmt . ')' $@5 stmt
   46          | FOR '(' expression_stmt expression_stmt . expression ')' stmt

    IDENTIFIER    shift, and go to state 1
    DEC_CONSTANT  shift, and go to state 57
    HEX_CONSTANT  shift, and go to state 58
    INCREMENT     shift, and go to state 2
    DECREMENT     shift, and go to state 3
    '-'           shift, and go to state 59
    '!'           shift, and go to state 60
    '('           shift, and go to state 61
    ')'           shift, and go to state 169

    expression       go to state 170
    sub_expr         go to state 156
    assignment_expr  go to state 63
    unary_expr       go to state 64
    identifier       go to state 65
    arithmetic_expr  go to state 66
    constant         go to state 67


State 165

   60 expression_stmt: expression ';' .

    $default  reduce using rule 60 (expression_stmt)


State 166

   50 while_block: WHILE '(' expression ')' . $@6 stmt

    $default  reduce using rule 49 ($@6)

    $@6  go to state 171


State 167

   62 expression: expression ',' sub_expr .
   64 sub_expr: sub_expr . '>' sub_expr
   65         | sub_expr . '<' sub_expr
   66         | sub_expr . EQ sub_expr
   67         | sub_expr . NOT_EQ sub_expr
   68         | sub_expr . LS_EQ sub_expr
   69         | sub_expr . GR_EQ sub_expr
   70         | sub_expr . LOGICAL_AND sub_expr
   71         | sub_expr . LOGICAL_OR sub_expr

    LOGICAL_AND  shift, and go to state 79
    LOGICAL_OR   shift, and go to state 80
    LS_EQ        shift, and go to state 81
    GR_EQ        shift, and go to state 82
    EQ           shift, and go to state 83
    NOT_EQ       shift, and go to state 84
    '<'          shift, and go to state 85
    '>'          shift, and go to state 86

    $default  reduce using rule 62 (expression)


State 168

   47 if_block: IF '(' expression ')' stmt .
   48         | IF '(' expression ')' stmt . ELSE stmt

    ELSE  shift, and go to state 172

    $default  reduce using rule 47 (if_block)


State 169

   45 for_block: FOR '(' expression_stmt expression_stmt ')' . $@5 stmt

    $default  reduce using rule 44 ($@5)

    $@5  go to state 173


State 170

   46 for_block: FOR '(' expression_stmt expression_stmt expression . ')' stmt
   62 expression: expression . ',' sub_expr

    ','  shift, and go to state 162
    ')'  shift, and go to state 174


State 171

   50 while_block: WHILE '(' expression ')' $@6 . stmt

    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3
    SHORT       shift, and go to state 4
    INT         shift, and go to state 5
    LONG        shift, and go to state 6
    LONG_LONG   shift, and go to state 7
    SIGNED      shift, and go to state 8
    UNSIGNED    shift, and go to state 9
    IF          shift, and go to state 130
    FOR         shift, and go to state 131
    WHILE       shift, and go to state 132
    CONTINUE    shift, and go to state 133
    BREAK       shift, and go to state 134
    RETURN      shift, and go to state 135
    '{'         shift, and go to state 126

    type              go to state 137
    data_type         go to state 14
    sign_specifier    go to state 15
    type_specifier    go to state 16
    stmt              go to state 175
    compound_stmt     go to state 139
    single_stmt       go to state 140
    for_block         go to state 141
    if_block          go to state 142
    while_block       go to state 143
    declaration       go to state 144
    declaration_list  go to state 18
    sub_decl          go to state 19
    assignment_expr   go to state 20
    unary_expr        go to state 21
    identifier        go to state 145
    array_index       go to state 23
    function_call     go to state 146


State 172

   48 if_block: IF '(' expression ')' stmt ELSE . stmt

    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3
    SHORT       shift, and go to state 4
    INT         shift, and go to state 5
    LONG        shift, and go to state 6
    LONG_LONG   shift, and go to state 7
    SIGNED      shift, and go to state 8
    UNSIGNED    shift, and go to state 9
    IF          shift, and go to state 130
    FOR         shift, and go to state 131
    WHILE       shift, and go to state 132
    CONTINUE    shift, and go to state 133
    BREAK       shift, and go to state 134
    RETURN      shift, and go to state 135
    '{'         shift, and go to state 126

    type              go to state 137
    data_type         go to state 14
    sign_specifier    go to state 15
    type_specifier    go to state 16
    stmt              go to state 176
    compound_stmt     go to state 139
    single_stmt       go to state 140
    for_block         go to state 141
    if_block          go to state 142
    while_block       go to state 143
    declaration       go to state 144
    declaration_list  go to state 18
    sub_decl          go to state 19
    assignment_expr   go to state 20
    unary_expr        go to state 21
    identifier        go to state 145
    array_index       go to state 23
    function_call     go to state 146


State 173

   45 for_block: FOR '(' expression_stmt expression_stmt ')' $@5 . stmt

    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3
    SHORT       shift, and go to state 4
    INT         shift, and go to state 5
    LONG        shift, and go to state 6
    LONG_LONG   shift, and go to state 7
    SIGNED      shift, and go to state 8
    UNSIGNED    shift, and go to state 9
    IF          shift, and go to state 130
    FOR         shift, and go to state 131
    WHILE       shift, and go to state 132
    CONTINUE    shift, and go to state 133
    BREAK       shift, and go to state 134
    RETURN      shift, and go to state 135
    '{'         shift, and go to state 126

    type              go to state 137
    data_type         go to state 14
    sign_specifier    go to state 15
    type_specifier    go to state 16
    stmt              go to state 177
    compound_stmt     go to state 139
    single_stmt       go to state 140
    for_block         go to state 141
    if_block          go to state 142
    while_block       go to state 143
    declaration       go to state 144
    declaration_list  go to state 18
    sub_decl          go to state 19
    assignment_expr   go to state 20
    unary_expr        go to state 21
    identifier        go to state 145
    array_index       go to state 23
    function_call     go to state 146


State 174

   46 for_block: FOR '(' expression_stmt expression_stmt expression ')' . stmt

    IDENTIFIER  shift, and go to state 1
    INCREMENT   shift, and go to state 2
    DECREMENT   shift, and go to state 3
    SHORT       shift, and go to state 4
    INT         shift, and go to state 5
    LONG        shift, and go to state 6
    LONG_LONG   shift, and go to state 7
    SIGNED      shift, and go to state 8
    UNSIGNED    shift, and go to state 9
    IF          shift, and go to state 130
    FOR         shift, and go to state 131
    WHILE       shift, and go to state 132
    CONTINUE    shift, and go to state 133
    BREAK       shift, and go to state 134
    RETURN      shift, and go to state 135
    '{'         shift, and go to state 126

    type              go to state 137
    data_type         go to state 14
    sign_specifier    go to state 15
    type_specifier    go to state 16
    stmt              go to state 178
    compound_stmt     go to state 139
    single_stmt       go to state 140
    for_block         go to state 141
    if_block          go to state 142
    while_block       go to state 143
    declaration       go to state 144
    declaration_list  go to state 18
    sub_decl          go to state 19
    assignment_expr   go to state 20
    unary_expr        go to state 21
    identifier        go to state 145
    array_index       go to state 23
    function_call     go to state 146


State 175

   50 while_block: WHILE '(' expression ')' $@6 stmt .

    $default  reduce using rule 50 (while_block)


State 176

   48 if_block: IF '(' expression ')' stmt ELSE stmt .

    $default  reduce using rule 48 (if_block)


State 177

   45 for_block: FOR '(' expression_stmt expression_stmt ')' $@5 stmt .

    $default  reduce using rule 45 (for_block)


State 178

   46 for_block: FOR '(' expression_stmt expression_stmt expression ')' stmt .

    $default  reduce using rule 46 (for_block)
