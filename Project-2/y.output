Terminals unused in grammar

   STRING
   PTR_SELECT
   INCREMENT
   DECREMENT
   LOGICAL_AND
   LOGICAL_OR
   TYPEDEF
   EXTERN
   STATIC
   AUTO
   REGISTER
   CONST
   DEFAULT
   ELSE
   CONTINUE
   BREAK
   RETURN


State 129 conflicts: 1 shift/reduce
State 130 conflicts: 1 shift/reduce
State 131 conflicts: 1 shift/reduce
State 132 conflicts: 1 shift/reduce
State 133 conflicts: 1 shift/reduce
State 134 conflicts: 1 shift/reduce


Grammar

    0 $accept: starter $end

    1 starter: starter builder
    2        | builder

    3 builder: function
    4        | declaration

    5 function: type IDENTIFIER '(' argument_list ')' compound_stmt

    6 type: data_type pointer
    7     | data_type

    8 pointer: '*' pointer
    9        | '*'

   10 data_type: sign_specifier type_specifier
   11          | type_specifier

   12 sign_specifier: SIGNED
   13               | UNSIGNED

   14 type_specifier: INT
   15               | SHORT
   16               | LONG
   17               | LONG_LONG

   18 argument_list: arguments
   19              | %empty

   20 arguments: arguments ',' arg
   21          | arg

   22 arg: type IDENTIFIER

   23 stmt: compound_stmt
   24     | single_stmt

   25 compound_stmt: '{' statements '}'

   26 statements: statements single_stmt
   27           | %empty

   28 single_stmt: if_block
   29            | for_block
   30            | declaration
   31            | function_call

   32 for_block: FOR '(' expression_stmt expression_stmt ')' stmt
   33          | FOR '(' expression_stmt expression_stmt expression ')' stmt

   34 if_block: IF '(' expression ')' stmt

   35 declaration: type assignment_expr ';'
   36            | type IDENTIFIER ';'
   37            | type array ';'
   38            | assignment_expr ';'

   39 expression_stmt: expression ';'
   40                | ';'

   41 expression: expression ',' sub_expr
   42           | sub_expr
   43           | expression '>' expression
   44           | expression '<' expression
   45           | expression EQ expression
   46           | expression NOT_EQ expression
   47           | expression LS_EQ expression
   48           | expression GR_EQ expression

   49 sub_expr: assignment_expr
   50         | IDENTIFIER
   51         | constant

   52 assignment_expr: lhs assign_op arithmetic_expr
   53                | lhs assign_op array_assign
   54                | lhs assign_op function_call

   55 lhs: IDENTIFIER
   56    | array_assign

   57 assign_op: '='
   58          | LEFT_ASSIGN
   59          | RIGHT_ASSIGN
   60          | ADD_ASSIGN
   61          | SUB_ASSIGN
   62          | MUL_ASSIGN
   63          | DIV_ASSIGN
   64          | MOD_ASSIGN
   65          | AND_ASSIGN
   66          | OR_ASSIGN
   67          | XOR_ASSIGN

   68 arithmetic_expr: arithmetic_expr '+' arithmetic_expr
   69                | arithmetic_expr '-' arithmetic_expr
   70                | arithmetic_expr '*' arithmetic_expr
   71                | arithmetic_expr '/' arithmetic_expr
   72                | '(' arithmetic_expr ')'
   73                | '-' arithmetic_expr
   74                | IDENTIFIER
   75                | constant

   76 constant: DEC_CONSTANT
   77         | HEX_CONSTANT

   78 array_assign: IDENTIFIER '[' sub_expr ']'

   79 array: IDENTIFIER '[' ']'
   80      | array_assign

   81 function_call: IDENTIFIER '(' parameter_list ')' ';' IDENTIFIER '(' ')' ';'

   82 parameter_list: parameter_list ',' parameter
   83               | parameter

   84 parameter: IDENTIFIER
   85          | constant
   86          | array_assign
   87          | function_call


Terminals, with rules where they appear

$end (0) 0
'(' (40) 5 32 33 34 72 81
')' (41) 5 32 33 34 72 81
'*' (42) 8 9 70
'+' (43) 68
',' (44) 20 41 82
'-' (45) 69 73
'/' (47) 71
';' (59) 35 36 37 38 39 40 81
'<' (60) 44
'=' (61) 57
'>' (62) 43
'[' (91) 78 79
']' (93) 78 79
'{' (123) 25
'}' (125) 25
error (256)
IDENTIFIER (258) 5 22 36 50 55 74 78 79 81 84
STRING (259)
PTR_SELECT (260)
INCREMENT (261)
DECREMENT (262)
LOGICAL_AND (263)
LOGICAL_OR (264)
LS_EQ (265) 47
GR_EQ (266) 48
EQ (267) 45
NOT_EQ (268) 46
MUL_ASSIGN (269) 62
DIV_ASSIGN (270) 63
MOD_ASSIGN (271) 64
ADD_ASSIGN (272) 60
SUB_ASSIGN (273) 61
LEFT_ASSIGN (274) 58
RIGHT_ASSIGN (275) 59
AND_ASSIGN (276) 65
XOR_ASSIGN (277) 67
OR_ASSIGN (278) 66
DEC_CONSTANT (279) 76
HEX_CONSTANT (280) 77
TYPEDEF (281)
EXTERN (282)
STATIC (283)
AUTO (284)
REGISTER (285)
SHORT (286) 15
INT (287) 14
LONG (288) 16
LONG_LONG (289) 17
SIGNED (290) 12
UNSIGNED (291) 13
CONST (292)
DEFAULT (293)
IF (294) 34
ELSE (295)
FOR (296) 32 33
CONTINUE (297)
BREAK (298)
RETURN (299)
UMINUS (300)


Nonterminals, with rules where they appear

$accept (61)
    on left: 0
starter (62)
    on left: 1 2, on right: 0 1
builder (63)
    on left: 3 4, on right: 1 2
function (64)
    on left: 5, on right: 3
type (65)
    on left: 6 7, on right: 5 22 35 36 37
pointer (66)
    on left: 8 9, on right: 6 8
data_type (67)
    on left: 10 11, on right: 6 7
sign_specifier (68)
    on left: 12 13, on right: 10
type_specifier (69)
    on left: 14 15 16 17, on right: 10 11
argument_list (70)
    on left: 18 19, on right: 5
arguments (71)
    on left: 20 21, on right: 18 20
arg (72)
    on left: 22, on right: 20 21
stmt (73)
    on left: 23 24, on right: 32 33 34
compound_stmt (74)
    on left: 25, on right: 5 23
statements (75)
    on left: 26 27, on right: 25 26
single_stmt (76)
    on left: 28 29 30 31, on right: 24 26
for_block (77)
    on left: 32 33, on right: 29
if_block (78)
    on left: 34, on right: 28
declaration (79)
    on left: 35 36 37 38, on right: 4 30
expression_stmt (80)
    on left: 39 40, on right: 32 33
expression (81)
    on left: 41 42 43 44 45 46 47 48, on right: 33 34 39 41 43 44 45
    46 47 48
sub_expr (82)
    on left: 49 50 51, on right: 41 42 78
assignment_expr (83)
    on left: 52 53 54, on right: 35 38 49
lhs (84)
    on left: 55 56, on right: 52 53 54
assign_op (85)
    on left: 57 58 59 60 61 62 63 64 65 66 67, on right: 52 53 54
arithmetic_expr (86)
    on left: 68 69 70 71 72 73 74 75, on right: 52 68 69 70 71 72 73
constant (87)
    on left: 76 77, on right: 51 75 85
array_assign (88)
    on left: 78, on right: 53 56 80 86
array (89)
    on left: 79 80, on right: 37
function_call (90)
    on left: 81, on right: 31 54 87
parameter_list (91)
    on left: 82 83, on right: 81 82
parameter (92)
    on left: 84 85 86 87, on right: 82 83


State 0

    0 $accept: . starter $end

    IDENTIFIER  shift, and go to state 1
    SHORT       shift, and go to state 2
    INT         shift, and go to state 3
    LONG        shift, and go to state 4
    LONG_LONG   shift, and go to state 5
    SIGNED      shift, and go to state 6
    UNSIGNED    shift, and go to state 7

    starter          go to state 8
    builder          go to state 9
    function         go to state 10
    type             go to state 11
    data_type        go to state 12
    sign_specifier   go to state 13
    type_specifier   go to state 14
    declaration      go to state 15
    assignment_expr  go to state 16
    lhs              go to state 17
    array_assign     go to state 18


State 1

   55 lhs: IDENTIFIER .
   78 array_assign: IDENTIFIER . '[' sub_expr ']'

    '['  shift, and go to state 19

    $default  reduce using rule 55 (lhs)


State 2

   15 type_specifier: SHORT .

    $default  reduce using rule 15 (type_specifier)


State 3

   14 type_specifier: INT .

    $default  reduce using rule 14 (type_specifier)


State 4

   16 type_specifier: LONG .

    $default  reduce using rule 16 (type_specifier)


State 5

   17 type_specifier: LONG_LONG .

    $default  reduce using rule 17 (type_specifier)


State 6

   12 sign_specifier: SIGNED .

    $default  reduce using rule 12 (sign_specifier)


State 7

   13 sign_specifier: UNSIGNED .

    $default  reduce using rule 13 (sign_specifier)


State 8

    0 $accept: starter . $end
    1 starter: starter . builder

    $end        shift, and go to state 20
    IDENTIFIER  shift, and go to state 1
    SHORT       shift, and go to state 2
    INT         shift, and go to state 3
    LONG        shift, and go to state 4
    LONG_LONG   shift, and go to state 5
    SIGNED      shift, and go to state 6
    UNSIGNED    shift, and go to state 7

    builder          go to state 21
    function         go to state 10
    type             go to state 11
    data_type        go to state 12
    sign_specifier   go to state 13
    type_specifier   go to state 14
    declaration      go to state 15
    assignment_expr  go to state 16
    lhs              go to state 17
    array_assign     go to state 18


State 9

    2 starter: builder .

    $default  reduce using rule 2 (starter)


State 10

    3 builder: function .

    $default  reduce using rule 3 (builder)


State 11

    5 function: type . IDENTIFIER '(' argument_list ')' compound_stmt
   35 declaration: type . assignment_expr ';'
   36            | type . IDENTIFIER ';'
   37            | type . array ';'

    IDENTIFIER  shift, and go to state 22

    assignment_expr  go to state 23
    lhs              go to state 17
    array_assign     go to state 24
    array            go to state 25


State 12

    6 type: data_type . pointer
    7     | data_type .

    '*'  shift, and go to state 26

    $default  reduce using rule 7 (type)

    pointer  go to state 27


State 13

   10 data_type: sign_specifier . type_specifier

    SHORT      shift, and go to state 2
    INT        shift, and go to state 3
    LONG       shift, and go to state 4
    LONG_LONG  shift, and go to state 5

    type_specifier  go to state 28


State 14

   11 data_type: type_specifier .

    $default  reduce using rule 11 (data_type)


State 15

    4 builder: declaration .

    $default  reduce using rule 4 (builder)


State 16

   38 declaration: assignment_expr . ';'

    ';'  shift, and go to state 29


State 17

   52 assignment_expr: lhs . assign_op arithmetic_expr
   53                | lhs . assign_op array_assign
   54                | lhs . assign_op function_call

    MUL_ASSIGN    shift, and go to state 30
    DIV_ASSIGN    shift, and go to state 31
    MOD_ASSIGN    shift, and go to state 32
    ADD_ASSIGN    shift, and go to state 33
    SUB_ASSIGN    shift, and go to state 34
    LEFT_ASSIGN   shift, and go to state 35
    RIGHT_ASSIGN  shift, and go to state 36
    AND_ASSIGN    shift, and go to state 37
    XOR_ASSIGN    shift, and go to state 38
    OR_ASSIGN     shift, and go to state 39
    '='           shift, and go to state 40

    assign_op  go to state 41


State 18

   56 lhs: array_assign .

    $default  reduce using rule 56 (lhs)


State 19

   78 array_assign: IDENTIFIER '[' . sub_expr ']'

    IDENTIFIER    shift, and go to state 42
    DEC_CONSTANT  shift, and go to state 43
    HEX_CONSTANT  shift, and go to state 44

    sub_expr         go to state 45
    assignment_expr  go to state 46
    lhs              go to state 17
    constant         go to state 47
    array_assign     go to state 18


State 20

    0 $accept: starter $end .

    $default  accept


State 21

    1 starter: starter builder .

    $default  reduce using rule 1 (starter)


State 22

    5 function: type IDENTIFIER . '(' argument_list ')' compound_stmt
   36 declaration: type IDENTIFIER . ';'
   55 lhs: IDENTIFIER .
   78 array_assign: IDENTIFIER . '[' sub_expr ']'
   79 array: IDENTIFIER . '[' ']'

    '('  shift, and go to state 48
    ';'  shift, and go to state 49
    '['  shift, and go to state 50

    $default  reduce using rule 55 (lhs)


State 23

   35 declaration: type assignment_expr . ';'

    ';'  shift, and go to state 51


State 24

   56 lhs: array_assign .
   80 array: array_assign .

    ';'       reduce using rule 80 (array)
    $default  reduce using rule 56 (lhs)


State 25

   37 declaration: type array . ';'

    ';'  shift, and go to state 52


State 26

    8 pointer: '*' . pointer
    9        | '*' .

    '*'  shift, and go to state 26

    $default  reduce using rule 9 (pointer)

    pointer  go to state 53


State 27

    6 type: data_type pointer .

    $default  reduce using rule 6 (type)


State 28

   10 data_type: sign_specifier type_specifier .

    $default  reduce using rule 10 (data_type)


State 29

   38 declaration: assignment_expr ';' .

    $default  reduce using rule 38 (declaration)


State 30

   62 assign_op: MUL_ASSIGN .

    $default  reduce using rule 62 (assign_op)


State 31

   63 assign_op: DIV_ASSIGN .

    $default  reduce using rule 63 (assign_op)


State 32

   64 assign_op: MOD_ASSIGN .

    $default  reduce using rule 64 (assign_op)


State 33

   60 assign_op: ADD_ASSIGN .

    $default  reduce using rule 60 (assign_op)


State 34

   61 assign_op: SUB_ASSIGN .

    $default  reduce using rule 61 (assign_op)


State 35

   58 assign_op: LEFT_ASSIGN .

    $default  reduce using rule 58 (assign_op)


State 36

   59 assign_op: RIGHT_ASSIGN .

    $default  reduce using rule 59 (assign_op)


State 37

   65 assign_op: AND_ASSIGN .

    $default  reduce using rule 65 (assign_op)


State 38

   67 assign_op: XOR_ASSIGN .

    $default  reduce using rule 67 (assign_op)


State 39

   66 assign_op: OR_ASSIGN .

    $default  reduce using rule 66 (assign_op)


State 40

   57 assign_op: '=' .

    $default  reduce using rule 57 (assign_op)


State 41

   52 assignment_expr: lhs assign_op . arithmetic_expr
   53                | lhs assign_op . array_assign
   54                | lhs assign_op . function_call

    IDENTIFIER    shift, and go to state 54
    DEC_CONSTANT  shift, and go to state 43
    HEX_CONSTANT  shift, and go to state 44
    '-'           shift, and go to state 55
    '('           shift, and go to state 56

    arithmetic_expr  go to state 57
    constant         go to state 58
    array_assign     go to state 59
    function_call    go to state 60


State 42

   50 sub_expr: IDENTIFIER .
   55 lhs: IDENTIFIER .
   78 array_assign: IDENTIFIER . '[' sub_expr ']'

    '['  shift, and go to state 19

    LS_EQ     reduce using rule 50 (sub_expr)
    GR_EQ     reduce using rule 50 (sub_expr)
    EQ        reduce using rule 50 (sub_expr)
    NOT_EQ    reduce using rule 50 (sub_expr)
    '<'       reduce using rule 50 (sub_expr)
    '>'       reduce using rule 50 (sub_expr)
    ')'       reduce using rule 50 (sub_expr)
    ','       reduce using rule 50 (sub_expr)
    ';'       reduce using rule 50 (sub_expr)
    ']'       reduce using rule 50 (sub_expr)
    $default  reduce using rule 55 (lhs)


State 43

   76 constant: DEC_CONSTANT .

    $default  reduce using rule 76 (constant)


State 44

   77 constant: HEX_CONSTANT .

    $default  reduce using rule 77 (constant)


State 45

   78 array_assign: IDENTIFIER '[' sub_expr . ']'

    ']'  shift, and go to state 61


State 46

   49 sub_expr: assignment_expr .

    $default  reduce using rule 49 (sub_expr)


State 47

   51 sub_expr: constant .

    $default  reduce using rule 51 (sub_expr)


State 48

    5 function: type IDENTIFIER '(' . argument_list ')' compound_stmt

    SHORT      shift, and go to state 2
    INT        shift, and go to state 3
    LONG       shift, and go to state 4
    LONG_LONG  shift, and go to state 5
    SIGNED     shift, and go to state 6
    UNSIGNED   shift, and go to state 7

    $default  reduce using rule 19 (argument_list)

    type            go to state 62
    data_type       go to state 12
    sign_specifier  go to state 13
    type_specifier  go to state 14
    argument_list   go to state 63
    arguments       go to state 64
    arg             go to state 65


State 49

   36 declaration: type IDENTIFIER ';' .

    $default  reduce using rule 36 (declaration)


State 50

   78 array_assign: IDENTIFIER '[' . sub_expr ']'
   79 array: IDENTIFIER '[' . ']'

    IDENTIFIER    shift, and go to state 42
    DEC_CONSTANT  shift, and go to state 43
    HEX_CONSTANT  shift, and go to state 44
    ']'           shift, and go to state 66

    sub_expr         go to state 45
    assignment_expr  go to state 46
    lhs              go to state 17
    constant         go to state 47
    array_assign     go to state 18


State 51

   35 declaration: type assignment_expr ';' .

    $default  reduce using rule 35 (declaration)


State 52

   37 declaration: type array ';' .

    $default  reduce using rule 37 (declaration)


State 53

    8 pointer: '*' pointer .

    $default  reduce using rule 8 (pointer)


State 54

   74 arithmetic_expr: IDENTIFIER .
   78 array_assign: IDENTIFIER . '[' sub_expr ']'
   81 function_call: IDENTIFIER . '(' parameter_list ')' ';' IDENTIFIER '(' ')' ';'

    '('  shift, and go to state 67
    '['  shift, and go to state 19

    $default  reduce using rule 74 (arithmetic_expr)


State 55

   73 arithmetic_expr: '-' . arithmetic_expr

    IDENTIFIER    shift, and go to state 68
    DEC_CONSTANT  shift, and go to state 43
    HEX_CONSTANT  shift, and go to state 44
    '-'           shift, and go to state 55
    '('           shift, and go to state 56

    arithmetic_expr  go to state 69
    constant         go to state 58


State 56

   72 arithmetic_expr: '(' . arithmetic_expr ')'

    IDENTIFIER    shift, and go to state 68
    DEC_CONSTANT  shift, and go to state 43
    HEX_CONSTANT  shift, and go to state 44
    '-'           shift, and go to state 55
    '('           shift, and go to state 56

    arithmetic_expr  go to state 70
    constant         go to state 58


State 57

   52 assignment_expr: lhs assign_op arithmetic_expr .
   68 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   69                | arithmetic_expr . '-' arithmetic_expr
   70                | arithmetic_expr . '*' arithmetic_expr
   71                | arithmetic_expr . '/' arithmetic_expr

    '+'  shift, and go to state 71
    '-'  shift, and go to state 72
    '*'  shift, and go to state 73
    '/'  shift, and go to state 74

    $default  reduce using rule 52 (assignment_expr)


State 58

   75 arithmetic_expr: constant .

    $default  reduce using rule 75 (arithmetic_expr)


State 59

   53 assignment_expr: lhs assign_op array_assign .

    $default  reduce using rule 53 (assignment_expr)


State 60

   54 assignment_expr: lhs assign_op function_call .

    $default  reduce using rule 54 (assignment_expr)


State 61

   78 array_assign: IDENTIFIER '[' sub_expr ']' .

    $default  reduce using rule 78 (array_assign)


State 62

   22 arg: type . IDENTIFIER

    IDENTIFIER  shift, and go to state 75


State 63

    5 function: type IDENTIFIER '(' argument_list . ')' compound_stmt

    ')'  shift, and go to state 76


State 64

   18 argument_list: arguments .
   20 arguments: arguments . ',' arg

    ','  shift, and go to state 77

    $default  reduce using rule 18 (argument_list)


State 65

   21 arguments: arg .

    $default  reduce using rule 21 (arguments)


State 66

   79 array: IDENTIFIER '[' ']' .

    $default  reduce using rule 79 (array)


State 67

   81 function_call: IDENTIFIER '(' . parameter_list ')' ';' IDENTIFIER '(' ')' ';'

    IDENTIFIER    shift, and go to state 78
    DEC_CONSTANT  shift, and go to state 43
    HEX_CONSTANT  shift, and go to state 44

    constant        go to state 79
    array_assign    go to state 80
    function_call   go to state 81
    parameter_list  go to state 82
    parameter       go to state 83


State 68

   74 arithmetic_expr: IDENTIFIER .

    $default  reduce using rule 74 (arithmetic_expr)


State 69

   68 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   69                | arithmetic_expr . '-' arithmetic_expr
   70                | arithmetic_expr . '*' arithmetic_expr
   71                | arithmetic_expr . '/' arithmetic_expr
   73                | '-' arithmetic_expr .

    $default  reduce using rule 73 (arithmetic_expr)


State 70

   68 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   69                | arithmetic_expr . '-' arithmetic_expr
   70                | arithmetic_expr . '*' arithmetic_expr
   71                | arithmetic_expr . '/' arithmetic_expr
   72                | '(' arithmetic_expr . ')'

    '+'  shift, and go to state 71
    '-'  shift, and go to state 72
    '*'  shift, and go to state 73
    '/'  shift, and go to state 74
    ')'  shift, and go to state 84


State 71

   68 arithmetic_expr: arithmetic_expr '+' . arithmetic_expr

    IDENTIFIER    shift, and go to state 68
    DEC_CONSTANT  shift, and go to state 43
    HEX_CONSTANT  shift, and go to state 44
    '-'           shift, and go to state 55
    '('           shift, and go to state 56

    arithmetic_expr  go to state 85
    constant         go to state 58


State 72

   69 arithmetic_expr: arithmetic_expr '-' . arithmetic_expr

    IDENTIFIER    shift, and go to state 68
    DEC_CONSTANT  shift, and go to state 43
    HEX_CONSTANT  shift, and go to state 44
    '-'           shift, and go to state 55
    '('           shift, and go to state 56

    arithmetic_expr  go to state 86
    constant         go to state 58


State 73

   70 arithmetic_expr: arithmetic_expr '*' . arithmetic_expr

    IDENTIFIER    shift, and go to state 68
    DEC_CONSTANT  shift, and go to state 43
    HEX_CONSTANT  shift, and go to state 44
    '-'           shift, and go to state 55
    '('           shift, and go to state 56

    arithmetic_expr  go to state 87
    constant         go to state 58


State 74

   71 arithmetic_expr: arithmetic_expr '/' . arithmetic_expr

    IDENTIFIER    shift, and go to state 68
    DEC_CONSTANT  shift, and go to state 43
    HEX_CONSTANT  shift, and go to state 44
    '-'           shift, and go to state 55
    '('           shift, and go to state 56

    arithmetic_expr  go to state 88
    constant         go to state 58


State 75

   22 arg: type IDENTIFIER .

    $default  reduce using rule 22 (arg)


State 76

    5 function: type IDENTIFIER '(' argument_list ')' . compound_stmt

    '{'  shift, and go to state 89

    compound_stmt  go to state 90


State 77

   20 arguments: arguments ',' . arg

    SHORT      shift, and go to state 2
    INT        shift, and go to state 3
    LONG       shift, and go to state 4
    LONG_LONG  shift, and go to state 5
    SIGNED     shift, and go to state 6
    UNSIGNED   shift, and go to state 7

    type            go to state 62
    data_type       go to state 12
    sign_specifier  go to state 13
    type_specifier  go to state 14
    arg             go to state 91


State 78

   78 array_assign: IDENTIFIER . '[' sub_expr ']'
   81 function_call: IDENTIFIER . '(' parameter_list ')' ';' IDENTIFIER '(' ')' ';'
   84 parameter: IDENTIFIER .

    '('  shift, and go to state 67
    '['  shift, and go to state 19

    $default  reduce using rule 84 (parameter)


State 79

   85 parameter: constant .

    $default  reduce using rule 85 (parameter)


State 80

   86 parameter: array_assign .

    $default  reduce using rule 86 (parameter)


State 81

   87 parameter: function_call .

    $default  reduce using rule 87 (parameter)


State 82

   81 function_call: IDENTIFIER '(' parameter_list . ')' ';' IDENTIFIER '(' ')' ';'
   82 parameter_list: parameter_list . ',' parameter

    ')'  shift, and go to state 92
    ','  shift, and go to state 93


State 83

   83 parameter_list: parameter .

    $default  reduce using rule 83 (parameter_list)


State 84

   72 arithmetic_expr: '(' arithmetic_expr ')' .

    $default  reduce using rule 72 (arithmetic_expr)


State 85

   68 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   68                | arithmetic_expr '+' arithmetic_expr .
   69                | arithmetic_expr . '-' arithmetic_expr
   70                | arithmetic_expr . '*' arithmetic_expr
   71                | arithmetic_expr . '/' arithmetic_expr

    '*'  shift, and go to state 73
    '/'  shift, and go to state 74

    $default  reduce using rule 68 (arithmetic_expr)


State 86

   68 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   69                | arithmetic_expr . '-' arithmetic_expr
   69                | arithmetic_expr '-' arithmetic_expr .
   70                | arithmetic_expr . '*' arithmetic_expr
   71                | arithmetic_expr . '/' arithmetic_expr

    '*'  shift, and go to state 73
    '/'  shift, and go to state 74

    $default  reduce using rule 69 (arithmetic_expr)


State 87

   68 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   69                | arithmetic_expr . '-' arithmetic_expr
   70                | arithmetic_expr . '*' arithmetic_expr
   70                | arithmetic_expr '*' arithmetic_expr .
   71                | arithmetic_expr . '/' arithmetic_expr

    $default  reduce using rule 70 (arithmetic_expr)


State 88

   68 arithmetic_expr: arithmetic_expr . '+' arithmetic_expr
   69                | arithmetic_expr . '-' arithmetic_expr
   70                | arithmetic_expr . '*' arithmetic_expr
   71                | arithmetic_expr . '/' arithmetic_expr
   71                | arithmetic_expr '/' arithmetic_expr .

    $default  reduce using rule 71 (arithmetic_expr)


State 89

   25 compound_stmt: '{' . statements '}'

    $default  reduce using rule 27 (statements)

    statements  go to state 94


State 90

    5 function: type IDENTIFIER '(' argument_list ')' compound_stmt .

    $default  reduce using rule 5 (function)


State 91

   20 arguments: arguments ',' arg .

    $default  reduce using rule 20 (arguments)


State 92

   81 function_call: IDENTIFIER '(' parameter_list ')' . ';' IDENTIFIER '(' ')' ';'

    ';'  shift, and go to state 95


State 93

   82 parameter_list: parameter_list ',' . parameter

    IDENTIFIER    shift, and go to state 78
    DEC_CONSTANT  shift, and go to state 43
    HEX_CONSTANT  shift, and go to state 44

    constant       go to state 79
    array_assign   go to state 80
    function_call  go to state 81
    parameter      go to state 96


State 94

   25 compound_stmt: '{' statements . '}'
   26 statements: statements . single_stmt

    IDENTIFIER  shift, and go to state 97
    SHORT       shift, and go to state 2
    INT         shift, and go to state 3
    LONG        shift, and go to state 4
    LONG_LONG   shift, and go to state 5
    SIGNED      shift, and go to state 6
    UNSIGNED    shift, and go to state 7
    IF          shift, and go to state 98
    FOR         shift, and go to state 99
    '}'         shift, and go to state 100

    type             go to state 101
    data_type        go to state 12
    sign_specifier   go to state 13
    type_specifier   go to state 14
    single_stmt      go to state 102
    for_block        go to state 103
    if_block         go to state 104
    declaration      go to state 105
    assignment_expr  go to state 16
    lhs              go to state 17
    array_assign     go to state 18
    function_call    go to state 106


State 95

   81 function_call: IDENTIFIER '(' parameter_list ')' ';' . IDENTIFIER '(' ')' ';'

    IDENTIFIER  shift, and go to state 107


State 96

   82 parameter_list: parameter_list ',' parameter .

    $default  reduce using rule 82 (parameter_list)


State 97

   55 lhs: IDENTIFIER .
   78 array_assign: IDENTIFIER . '[' sub_expr ']'
   81 function_call: IDENTIFIER . '(' parameter_list ')' ';' IDENTIFIER '(' ')' ';'

    '('  shift, and go to state 67
    '['  shift, and go to state 19

    $default  reduce using rule 55 (lhs)


State 98

   34 if_block: IF . '(' expression ')' stmt

    '('  shift, and go to state 108


State 99

   32 for_block: FOR . '(' expression_stmt expression_stmt ')' stmt
   33          | FOR . '(' expression_stmt expression_stmt expression ')' stmt

    '('  shift, and go to state 109


State 100

   25 compound_stmt: '{' statements '}' .

    $default  reduce using rule 25 (compound_stmt)


State 101

   35 declaration: type . assignment_expr ';'
   36            | type . IDENTIFIER ';'
   37            | type . array ';'

    IDENTIFIER  shift, and go to state 110

    assignment_expr  go to state 23
    lhs              go to state 17
    array_assign     go to state 24
    array            go to state 25


State 102

   26 statements: statements single_stmt .

    $default  reduce using rule 26 (statements)


State 103

   29 single_stmt: for_block .

    $default  reduce using rule 29 (single_stmt)


State 104

   28 single_stmt: if_block .

    $default  reduce using rule 28 (single_stmt)


State 105

   30 single_stmt: declaration .

    $default  reduce using rule 30 (single_stmt)


State 106

   31 single_stmt: function_call .

    $default  reduce using rule 31 (single_stmt)


State 107

   81 function_call: IDENTIFIER '(' parameter_list ')' ';' IDENTIFIER . '(' ')' ';'

    '('  shift, and go to state 111


State 108

   34 if_block: IF '(' . expression ')' stmt

    IDENTIFIER    shift, and go to state 42
    DEC_CONSTANT  shift, and go to state 43
    HEX_CONSTANT  shift, and go to state 44

    expression       go to state 112
    sub_expr         go to state 113
    assignment_expr  go to state 46
    lhs              go to state 17
    constant         go to state 47
    array_assign     go to state 18


State 109

   32 for_block: FOR '(' . expression_stmt expression_stmt ')' stmt
   33          | FOR '(' . expression_stmt expression_stmt expression ')' stmt

    IDENTIFIER    shift, and go to state 42
    DEC_CONSTANT  shift, and go to state 43
    HEX_CONSTANT  shift, and go to state 44
    ';'           shift, and go to state 114

    expression_stmt  go to state 115
    expression       go to state 116
    sub_expr         go to state 113
    assignment_expr  go to state 46
    lhs              go to state 17
    constant         go to state 47
    array_assign     go to state 18


State 110

   36 declaration: type IDENTIFIER . ';'
   55 lhs: IDENTIFIER .
   78 array_assign: IDENTIFIER . '[' sub_expr ']'
   79 array: IDENTIFIER . '[' ']'

    ';'  shift, and go to state 49
    '['  shift, and go to state 50

    $default  reduce using rule 55 (lhs)


State 111

   81 function_call: IDENTIFIER '(' parameter_list ')' ';' IDENTIFIER '(' . ')' ';'

    ')'  shift, and go to state 117


State 112

   34 if_block: IF '(' expression . ')' stmt
   41 expression: expression . ',' sub_expr
   43           | expression . '>' expression
   44           | expression . '<' expression
   45           | expression . EQ expression
   46           | expression . NOT_EQ expression
   47           | expression . LS_EQ expression
   48           | expression . GR_EQ expression

    LS_EQ   shift, and go to state 118
    GR_EQ   shift, and go to state 119
    EQ      shift, and go to state 120
    NOT_EQ  shift, and go to state 121
    '<'     shift, and go to state 122
    '>'     shift, and go to state 123
    ')'     shift, and go to state 124
    ','     shift, and go to state 125


State 113

   42 expression: sub_expr .

    $default  reduce using rule 42 (expression)


State 114

   40 expression_stmt: ';' .

    $default  reduce using rule 40 (expression_stmt)


State 115

   32 for_block: FOR '(' expression_stmt . expression_stmt ')' stmt
   33          | FOR '(' expression_stmt . expression_stmt expression ')' stmt

    IDENTIFIER    shift, and go to state 42
    DEC_CONSTANT  shift, and go to state 43
    HEX_CONSTANT  shift, and go to state 44
    ';'           shift, and go to state 114

    expression_stmt  go to state 126
    expression       go to state 116
    sub_expr         go to state 113
    assignment_expr  go to state 46
    lhs              go to state 17
    constant         go to state 47
    array_assign     go to state 18


State 116

   39 expression_stmt: expression . ';'
   41 expression: expression . ',' sub_expr
   43           | expression . '>' expression
   44           | expression . '<' expression
   45           | expression . EQ expression
   46           | expression . NOT_EQ expression
   47           | expression . LS_EQ expression
   48           | expression . GR_EQ expression

    LS_EQ   shift, and go to state 118
    GR_EQ   shift, and go to state 119
    EQ      shift, and go to state 120
    NOT_EQ  shift, and go to state 121
    '<'     shift, and go to state 122
    '>'     shift, and go to state 123
    ','     shift, and go to state 125
    ';'     shift, and go to state 127


State 117

   81 function_call: IDENTIFIER '(' parameter_list ')' ';' IDENTIFIER '(' ')' . ';'

    ';'  shift, and go to state 128


State 118

   47 expression: expression LS_EQ . expression

    IDENTIFIER    shift, and go to state 42
    DEC_CONSTANT  shift, and go to state 43
    HEX_CONSTANT  shift, and go to state 44

    expression       go to state 129
    sub_expr         go to state 113
    assignment_expr  go to state 46
    lhs              go to state 17
    constant         go to state 47
    array_assign     go to state 18


State 119

   48 expression: expression GR_EQ . expression

    IDENTIFIER    shift, and go to state 42
    DEC_CONSTANT  shift, and go to state 43
    HEX_CONSTANT  shift, and go to state 44

    expression       go to state 130
    sub_expr         go to state 113
    assignment_expr  go to state 46
    lhs              go to state 17
    constant         go to state 47
    array_assign     go to state 18


State 120

   45 expression: expression EQ . expression

    IDENTIFIER    shift, and go to state 42
    DEC_CONSTANT  shift, and go to state 43
    HEX_CONSTANT  shift, and go to state 44

    expression       go to state 131
    sub_expr         go to state 113
    assignment_expr  go to state 46
    lhs              go to state 17
    constant         go to state 47
    array_assign     go to state 18


State 121

   46 expression: expression NOT_EQ . expression

    IDENTIFIER    shift, and go to state 42
    DEC_CONSTANT  shift, and go to state 43
    HEX_CONSTANT  shift, and go to state 44

    expression       go to state 132
    sub_expr         go to state 113
    assignment_expr  go to state 46
    lhs              go to state 17
    constant         go to state 47
    array_assign     go to state 18


State 122

   44 expression: expression '<' . expression

    IDENTIFIER    shift, and go to state 42
    DEC_CONSTANT  shift, and go to state 43
    HEX_CONSTANT  shift, and go to state 44

    expression       go to state 133
    sub_expr         go to state 113
    assignment_expr  go to state 46
    lhs              go to state 17
    constant         go to state 47
    array_assign     go to state 18


State 123

   43 expression: expression '>' . expression

    IDENTIFIER    shift, and go to state 42
    DEC_CONSTANT  shift, and go to state 43
    HEX_CONSTANT  shift, and go to state 44

    expression       go to state 134
    sub_expr         go to state 113
    assignment_expr  go to state 46
    lhs              go to state 17
    constant         go to state 47
    array_assign     go to state 18


State 124

   34 if_block: IF '(' expression ')' . stmt

    IDENTIFIER  shift, and go to state 97
    SHORT       shift, and go to state 2
    INT         shift, and go to state 3
    LONG        shift, and go to state 4
    LONG_LONG   shift, and go to state 5
    SIGNED      shift, and go to state 6
    UNSIGNED    shift, and go to state 7
    IF          shift, and go to state 98
    FOR         shift, and go to state 99
    '{'         shift, and go to state 89

    type             go to state 101
    data_type        go to state 12
    sign_specifier   go to state 13
    type_specifier   go to state 14
    stmt             go to state 135
    compound_stmt    go to state 136
    single_stmt      go to state 137
    for_block        go to state 103
    if_block         go to state 104
    declaration      go to state 105
    assignment_expr  go to state 16
    lhs              go to state 17
    array_assign     go to state 18
    function_call    go to state 106


State 125

   41 expression: expression ',' . sub_expr

    IDENTIFIER    shift, and go to state 42
    DEC_CONSTANT  shift, and go to state 43
    HEX_CONSTANT  shift, and go to state 44

    sub_expr         go to state 138
    assignment_expr  go to state 46
    lhs              go to state 17
    constant         go to state 47
    array_assign     go to state 18


State 126

   32 for_block: FOR '(' expression_stmt expression_stmt . ')' stmt
   33          | FOR '(' expression_stmt expression_stmt . expression ')' stmt

    IDENTIFIER    shift, and go to state 42
    DEC_CONSTANT  shift, and go to state 43
    HEX_CONSTANT  shift, and go to state 44
    ')'           shift, and go to state 139

    expression       go to state 140
    sub_expr         go to state 113
    assignment_expr  go to state 46
    lhs              go to state 17
    constant         go to state 47
    array_assign     go to state 18


State 127

   39 expression_stmt: expression ';' .

    $default  reduce using rule 39 (expression_stmt)


State 128

   81 function_call: IDENTIFIER '(' parameter_list ')' ';' IDENTIFIER '(' ')' ';' .

    $default  reduce using rule 81 (function_call)


State 129

   41 expression: expression . ',' sub_expr
   43           | expression . '>' expression
   44           | expression . '<' expression
   45           | expression . EQ expression
   46           | expression . NOT_EQ expression
   47           | expression . LS_EQ expression
   47           | expression LS_EQ expression .
   48           | expression . GR_EQ expression

    ','  shift, and go to state 125

    ','       [reduce using rule 47 (expression)]
    $default  reduce using rule 47 (expression)


State 130

   41 expression: expression . ',' sub_expr
   43           | expression . '>' expression
   44           | expression . '<' expression
   45           | expression . EQ expression
   46           | expression . NOT_EQ expression
   47           | expression . LS_EQ expression
   48           | expression . GR_EQ expression
   48           | expression GR_EQ expression .

    ','  shift, and go to state 125

    ','       [reduce using rule 48 (expression)]
    $default  reduce using rule 48 (expression)


State 131

   41 expression: expression . ',' sub_expr
   43           | expression . '>' expression
   44           | expression . '<' expression
   45           | expression . EQ expression
   45           | expression EQ expression .
   46           | expression . NOT_EQ expression
   47           | expression . LS_EQ expression
   48           | expression . GR_EQ expression

    ','  shift, and go to state 125

    ','       [reduce using rule 45 (expression)]
    $default  reduce using rule 45 (expression)


State 132

   41 expression: expression . ',' sub_expr
   43           | expression . '>' expression
   44           | expression . '<' expression
   45           | expression . EQ expression
   46           | expression . NOT_EQ expression
   46           | expression NOT_EQ expression .
   47           | expression . LS_EQ expression
   48           | expression . GR_EQ expression

    ','  shift, and go to state 125

    ','       [reduce using rule 46 (expression)]
    $default  reduce using rule 46 (expression)


State 133

   41 expression: expression . ',' sub_expr
   43           | expression . '>' expression
   44           | expression . '<' expression
   44           | expression '<' expression .
   45           | expression . EQ expression
   46           | expression . NOT_EQ expression
   47           | expression . LS_EQ expression
   48           | expression . GR_EQ expression

    ','  shift, and go to state 125

    ','       [reduce using rule 44 (expression)]
    $default  reduce using rule 44 (expression)


State 134

   41 expression: expression . ',' sub_expr
   43           | expression . '>' expression
   43           | expression '>' expression .
   44           | expression . '<' expression
   45           | expression . EQ expression
   46           | expression . NOT_EQ expression
   47           | expression . LS_EQ expression
   48           | expression . GR_EQ expression

    ','  shift, and go to state 125

    ','       [reduce using rule 43 (expression)]
    $default  reduce using rule 43 (expression)


State 135

   34 if_block: IF '(' expression ')' stmt .

    $default  reduce using rule 34 (if_block)


State 136

   23 stmt: compound_stmt .

    $default  reduce using rule 23 (stmt)


State 137

   24 stmt: single_stmt .

    $default  reduce using rule 24 (stmt)


State 138

   41 expression: expression ',' sub_expr .

    $default  reduce using rule 41 (expression)


State 139

   32 for_block: FOR '(' expression_stmt expression_stmt ')' . stmt

    IDENTIFIER  shift, and go to state 97
    SHORT       shift, and go to state 2
    INT         shift, and go to state 3
    LONG        shift, and go to state 4
    LONG_LONG   shift, and go to state 5
    SIGNED      shift, and go to state 6
    UNSIGNED    shift, and go to state 7
    IF          shift, and go to state 98
    FOR         shift, and go to state 99
    '{'         shift, and go to state 89

    type             go to state 101
    data_type        go to state 12
    sign_specifier   go to state 13
    type_specifier   go to state 14
    stmt             go to state 141
    compound_stmt    go to state 136
    single_stmt      go to state 137
    for_block        go to state 103
    if_block         go to state 104
    declaration      go to state 105
    assignment_expr  go to state 16
    lhs              go to state 17
    array_assign     go to state 18
    function_call    go to state 106


State 140

   33 for_block: FOR '(' expression_stmt expression_stmt expression . ')' stmt
   41 expression: expression . ',' sub_expr
   43           | expression . '>' expression
   44           | expression . '<' expression
   45           | expression . EQ expression
   46           | expression . NOT_EQ expression
   47           | expression . LS_EQ expression
   48           | expression . GR_EQ expression

    LS_EQ   shift, and go to state 118
    GR_EQ   shift, and go to state 119
    EQ      shift, and go to state 120
    NOT_EQ  shift, and go to state 121
    '<'     shift, and go to state 122
    '>'     shift, and go to state 123
    ')'     shift, and go to state 142
    ','     shift, and go to state 125


State 141

   32 for_block: FOR '(' expression_stmt expression_stmt ')' stmt .

    $default  reduce using rule 32 (for_block)


State 142

   33 for_block: FOR '(' expression_stmt expression_stmt expression ')' . stmt

    IDENTIFIER  shift, and go to state 97
    SHORT       shift, and go to state 2
    INT         shift, and go to state 3
    LONG        shift, and go to state 4
    LONG_LONG   shift, and go to state 5
    SIGNED      shift, and go to state 6
    UNSIGNED    shift, and go to state 7
    IF          shift, and go to state 98
    FOR         shift, and go to state 99
    '{'         shift, and go to state 89

    type             go to state 101
    data_type        go to state 12
    sign_specifier   go to state 13
    type_specifier   go to state 14
    stmt             go to state 143
    compound_stmt    go to state 136
    single_stmt      go to state 137
    for_block        go to state 103
    if_block         go to state 104
    declaration      go to state 105
    assignment_expr  go to state 16
    lhs              go to state 17
    array_assign     go to state 18
    function_call    go to state 106


State 143

   33 for_block: FOR '(' expression_stmt expression_stmt expression ')' stmt .

    $default  reduce using rule 33 (for_block)
